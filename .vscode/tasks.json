{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Setup: Check tools",
      "type": "process",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/scripts/setup.ps1"
      ],
      "problemMatcher": []
    },
    {
      "label": "Setup: Install (Admin)",
      "type": "process",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/scripts/setup_admin.ps1"
      ],
      "group": {
        "kind": "build",
        "isDefault": true
      },
      "presentation": {
        "reveal": "always",
        "panel": "dedicated"
      },
      "problemMatcher": []
    },
    {
      "label": "Setup: Install missing tools (Non-Admin)",
      "type": "process",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/scripts/setup.ps1",
        "-Install",
        "-WithGit",
        "-WithGcloud",
        "-WithNode",
        "-WithPython",
        "-WithPnpm",
        "-WithUv"
      ],
      "problemMatcher": []
    },
    {
      "label": "Setup: Refresh Node PATH (session)",
      "type": "process",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/scripts/refresh_node_path.ps1"
      ],
      "problemMatcher": []
    },
    {
      "label": "Firebase: Login",
      "type": "process",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-File",
        "${workspaceFolder}/scripts/firebase_login.ps1",
        "-Reauth"
      ],
      "problemMatcher": []
    },
    {
      "label": "MCP: Start Supervisor (Background)",
      "type": "process",
      "command": "node",
      "args": ["${workspaceFolder}/scripts/mcp_supervisor.mjs"],
      "isBackground": true,
      "presentation": {
        "echo": false,
        "reveal": "never",
        "focus": false,
        "panel": "dedicated"
      },
      "problemMatcher": []
    },
    {
      "label": "MCP: Start Supervisor (Manual)",
      "type": "process",
      "command": "node",
      "args": ["${workspaceFolder}/scripts/mcp_supervisor.mjs"],
      "isBackground": true,
      "presentation": {
        "echo": true,
        "reveal": "always",
        "focus": false,
        "panel": "dedicated"
      },
      "problemMatcher": []
    },
    {
      "label": "Automate MCP server dependencies (Node, npm, Docker, Python, uvx)",
      "type": "shell",
      "command": "pwsh",
      "args": [
        "-NoProfile",
        "-ExecutionPolicy",
        "Bypass",
        "-Command",
        "$ErrorActionPreference = 'Stop'; if (-not (Get-Command node -ErrorAction SilentlyContinue)) { Write-Host 'Installing Node.js...'; Invoke-WebRequest -Uri 'https://nodejs.org/dist/v20.11.1/node-v20.11.1-x64.msi' -OutFile 'nodejs.msi'; Start-Process 'msiexec.exe' -ArgumentList '/i nodejs.msi /quiet' -Wait; Remove-Item 'nodejs.msi'; }; if (-not (Get-Command npm -ErrorAction SilentlyContinue)) { Write-Host 'npm should be installed with Node.js.' }; if (-not (Get-Command docker -ErrorAction SilentlyContinue)) { Write-Host 'Please install Docker Desktop from https://www.docker.com/products/docker-desktop and start it.' }; if (-not (Get-Command python -ErrorAction SilentlyContinue)) { Write-Host 'Installing Python...'; Invoke-WebRequest -Uri 'https://www.python.org/ftp/python/3.12.2/python-3.12.2-amd64.exe' -OutFile 'python-installer.exe'; Start-Process 'python-installer.exe' -ArgumentList '/quiet InstallAllUsers=1 PrependPath=1' -Wait; Remove-Item 'python-installer.exe'; }; npm install -g uvx; npm install @upstash/context7-mcp @modelcontextprotocol/server-sequential-thinking @modelcontextprotocol/server-memory @modelcontextprotocol/server-brave-search @modelcontextprotocol/server-puppeteer @notionhq/notion-mcp-server tavily-mcp@0.2.3 mcp-sqlite"
      ],
      "isBackground": false,
      "problemMatcher": ["$tsc"],
      "group": "build"
    }
  ]
}
