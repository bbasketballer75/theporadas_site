rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }

    function isValidImageFile() {
      return request.resource.contentType.matches('image/.*') &&
             request.resource.size < 10 * 1024 * 1024; // 10MB limit
    }

    function isValidGalleryPath() {
      return request.resource.name.matches('gallery/(thumbnail|medium|large)/.*');
    }

    // Gallery images - public read access, authenticated write
    match /gallery/{size}/{allPaths=**} {
      // Allow anyone to read gallery images
      allow read: if true;

      // Allow authenticated users to upload images
      allow create: if isAuthenticated() && isValidImageFile() && isValidGalleryPath();

      // Allow authenticated users to update/delete their own images
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.metadata.ownerId;
    }

    // Profile photos - authenticated users only
    match /profiles/{userId}/{allPaths=**} {
      // Allow read for authenticated users
      allow read: if isAuthenticated();

      // Allow users to manage their own profile photos
      allow write: if isAuthenticated() && request.auth.uid == userId && isValidImageFile();
    }

    // Family photos - authenticated users only
    match /family/{allPaths=**} {
      // Allow read for authenticated users
      allow read: if isAuthenticated();

      // Allow authenticated users to upload family photos
      allow create: if isAuthenticated() && isValidImageFile();

      // Allow authenticated users to update/delete their own family photos
      allow update, delete: if isAuthenticated() && request.auth.uid == resource.metadata.ownerId;
    }

    // Temporary uploads - authenticated users only
    match /temp/{userId}/{allPaths=**} {
      // Allow authenticated users to manage their temp files
      allow read, write: if isAuthenticated() && request.auth.uid == userId && isValidImageFile();
    }

    // Default deny for any other paths
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}
