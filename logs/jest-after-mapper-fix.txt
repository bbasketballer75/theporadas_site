FAIL servers/src/git/tests/mcp-server/transports/auth/strategies/oauthStrategy.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\git\tests\mcp-server\transports\auth\strategies\oauthStrategy.test.ts:5
    import * as jose from "jose";
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/git/tests/mcp-server/transports/stdio/stdioTransport.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\git\tests\mcp-server\transports\stdio\stdioTransport.test.ts:5
    import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/git/tests/mcp-server/transports/auth/auth.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\git\tests\mcp-server\transports\auth\auth.test.ts:5
    import { describe, it, expect, beforeEach, vi } from "vitest";
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/git/tests/utils/parsing/dateParser.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\git\tests\utils\parsing\dateParser.test.ts:5
    import { describe, it, expect, vi, beforeEach } from "vitest";
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/git/tests/utils/security/rateLimiter.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\git\tests\utils\security\rateLimiter.test.ts:1
    ({"Object.<anonymous>":function(module,exports,require,__dirname,__filename,jest){import { describe, it, expect, beforeEach, afterEach, vi } from "vitest";
                                                                                      ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/git/tests/utils/security/idGenerator.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\git\tests\utils\security\idGenerator.test.ts:5
    import { describe, it, expect } from "vitest";
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/git/tests/utils/parsing/jsonParser.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\git\tests\utils\parsing\jsonParser.test.ts:5
    import { beforeEach, describe, expect, it, vi } from "vitest";
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/git/tests/utils/metrics/tokenCounter.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\git\tests\utils\metrics\tokenCounter.test.ts:5
    import { describe, it, expect } from "vitest";
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/git/tests/utils/internal/requestContext.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\git\tests\utils\internal\requestContext.test.ts:5
    import { describe, it, expect, beforeEach } from "vitest";
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/git/tests/utils/internal/errorHandler.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\git\tests\utils\internal\errorHandler.test.ts:5
    import { describe, it, expect, vi, beforeEach } from "vitest";
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/git/tests/utils/internal/logger.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\git\tests\utils\internal\logger.test.ts:5
    import { describe, it, expect, vi, beforeEach, afterEach, } from "vitest";
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

PASS servers/src/filesystem/dist/__tests__/roots-utils.test.js
  ΓùÅ Console

    console.error
      Skipping invalid path or inaccessible: file://C:\Users\Austin\AppData\Local\Temp\non-existent-directory-12345

      51 |         const resolvedPath = await parseRootUri(requestedRoot.uri);
      52 |         if (!resolvedPath) {
    > 53 |             console.error(formatDirectoryError(requestedRoot.uri, undefined, 'invalid path or inaccessible'));
         |                     ^
      54 |             continue;
      55 |         }
      56 |         try {

      at error (servers/src/filesystem/dist/roots-utils.js:53:21)
      at Object.<anonymous> (servers/src/filesystem/dist/__tests__/roots-utils.test.js:60:28)

    console.error
      Skipping non-directory root: C:\Users\Austin\AppData\Local\Temp\mcp-roots-test1-vthB6J\test-file.txt

      60 |             }
      61 |             else {
    > 62 |                 console.error(formatDirectoryError(resolvedPath, undefined, 'non-directory root'));
         |                         ^
      63 |             }
      64 |         }
      65 |         catch (error) {

      at error (servers/src/filesystem/dist/roots-utils.js:62:25)
      at Object.<anonymous> (servers/src/filesystem/dist/__tests__/roots-utils.test.js:60:28)

    console.error
      Skipping invalid path or inaccessible: file:// invalid path

      51 |         const resolvedPath = await parseRootUri(requestedRoot.uri);
      52 |         if (!resolvedPath) {
    > 53 |             console.error(formatDirectoryError(requestedRoot.uri, undefined, 'invalid path or inaccessible'));
         |                     ^
      54 |             continue;
      55 |         }
      56 |         try {

      at error (servers/src/filesystem/dist/roots-utils.js:53:21)
      at Object.<anonymous> (servers/src/filesystem/dist/__tests__/roots-utils.test.js:60:28)

PASS servers/src/filesystem/dist/__tests__/path-validation.test.js
  ΓùÅ Console

    console.log
      
      ΓÜá∩╕Å  Symlink tests will be skipped - symlink creation not supported in this environment

      at log (servers/src/filesystem/dist/__tests__/path-validation.test.js:40:21)

    console.log
         On Windows, enable Developer Mode or run as Administrator to enable symlink tests

      at log (servers/src/filesystem/dist/__tests__/path-validation.test.js:41:21)

    console.log
         ΓÅ¡∩╕Å  Skipping symlink race condition test - symlinks not supported

      at Object.log (servers/src/filesystem/dist/__tests__/path-validation.test.js:519:25)

    console.log
         ΓÅ¡∩╕Å  Skipping timing validation test - symlinks not supported

      at Object.log (servers/src/filesystem/dist/__tests__/path-validation.test.js:535:25)

    console.log
         ΓÅ¡∩╕Å  Skipping directory creation timing test - symlinks not supported

      at Object.log (servers/src/filesystem/dist/__tests__/path-validation.test.js:550:25)

    console.log
         ΓÅ¡∩╕Å  Skipping exclusive file creation test - symlinks not supported

      at Object.log (servers/src/filesystem/dist/__tests__/path-validation.test.js:564:25)

    console.log
         ΓÅ¡∩╕Å  Skipping resolved parent paths test - symlinks not supported

      at Object.log (servers/src/filesystem/dist/__tests__/path-validation.test.js:577:25)

    console.log
         ΓÅ¡∩╕Å  Skipping parent directory symlink traversal test - symlinks not supported

      at Object.log (servers/src/filesystem/dist/__tests__/path-validation.test.js:594:25)

    console.log
         ΓÅ¡∩╕Å  Skipping race condition prevention test - symlinks not supported

      at Object.log (servers/src/filesystem/dist/__tests__/path-validation.test.js:613:25)

    console.log
         ΓÅ¡∩╕Å  Skipping symlinks within allowed directories test - symlinks not supported

      at Object.log (servers/src/filesystem/dist/__tests__/path-validation.test.js:654:25)

    console.log
         ΓÅ¡∩╕Å  Skipping symlink overwrite prevention test - symlinks not supported

      at Object.log (servers/src/filesystem/dist/__tests__/path-validation.test.js:681:25)

    console.log
         ΓÅ¡∩╕Å  Skipping race condition in read operations test - symlinks not supported

      at Object.log (servers/src/filesystem/dist/__tests__/path-validation.test.js:708:25)

    console.log
         ΓÅ¡∩╕Å  Skipping rename symlink test - symlinks not supported

      at Object.log (servers/src/filesystem/dist/__tests__/path-validation.test.js:732:25)

PASS servers/src/filesystem/dist/__tests__/path-utils.test.js
PASS servers/src/filesystem/dist/__tests__/lib.test.js
PASS servers/src/filesystem/dist/__tests__/directory-tree.test.js
FAIL servers/src/filesystem/__tests__/path-validation.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\filesystem\__tests__\path-validation.test.ts:1
    ({"Object.<anonymous>":function(module,exports,require,__dirname,__filename,jest){import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';
                                                                                      ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/filesystem/__tests__/roots-utils.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\filesystem\__tests__\roots-utils.test.ts:1
    ({"Object.<anonymous>":function(module,exports,require,__dirname,__filename,jest){import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';
                                                                                      ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/filesystem/__tests__/path-utils.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\filesystem\__tests__\path-utils.test.ts:1
    ({"Object.<anonymous>":function(module,exports,require,__dirname,__filename,jest){import { describe, it, expect } from '@jest/globals';
                                                                                      ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/filesystem/__tests__/lib.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\filesystem\__tests__\lib.test.ts:1
    ({"Object.<anonymous>":function(module,exports,require,__dirname,__filename,jest){import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';
                                                                                      ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/filesystem/__tests__/directory-tree.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\filesystem\__tests__\directory-tree.test.ts:1
    ({"Object.<anonymous>":function(module,exports,require,__dirname,__filename,jest){import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';
                                                                                      ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

Summary of all failing tests
FAIL servers/src/git/tests/mcp-server/transports/auth/strategies/oauthStrategy.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\git\tests\mcp-server\transports\auth\strategies\oauthStrategy.test.ts:5
    import * as jose from "jose";
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/git/tests/mcp-server/transports/stdio/stdioTransport.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\git\tests\mcp-server\transports\stdio\stdioTransport.test.ts:5
    import { McpServer } from "@modelcontextprotocol/sdk/server/mcp.js";
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/git/tests/mcp-server/transports/auth/auth.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\git\tests\mcp-server\transports\auth\auth.test.ts:5
    import { describe, it, expect, beforeEach, vi } from "vitest";
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/git/tests/utils/parsing/dateParser.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\git\tests\utils\parsing\dateParser.test.ts:5
    import { describe, it, expect, vi, beforeEach } from "vitest";
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/git/tests/utils/security/rateLimiter.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\git\tests\utils\security\rateLimiter.test.ts:1
    ({"Object.<anonymous>":function(module,exports,require,__dirname,__filename,jest){import { describe, it, expect, beforeEach, afterEach, vi } from "vitest";
                                                                                      ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/git/tests/utils/security/idGenerator.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\git\tests\utils\security\idGenerator.test.ts:5
    import { describe, it, expect } from "vitest";
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/git/tests/utils/parsing/jsonParser.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\git\tests\utils\parsing\jsonParser.test.ts:5
    import { beforeEach, describe, expect, it, vi } from "vitest";
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/git/tests/utils/metrics/tokenCounter.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\git\tests\utils\metrics\tokenCounter.test.ts:5
    import { describe, it, expect } from "vitest";
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/git/tests/utils/internal/requestContext.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\git\tests\utils\internal\requestContext.test.ts:5
    import { describe, it, expect, beforeEach } from "vitest";
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/git/tests/utils/internal/errorHandler.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\git\tests\utils\internal\errorHandler.test.ts:5
    import { describe, it, expect, vi, beforeEach } from "vitest";
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/git/tests/utils/internal/logger.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\git\tests\utils\internal\logger.test.ts:5
    import { describe, it, expect, vi, beforeEach, afterEach, } from "vitest";
    ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/filesystem/__tests__/path-validation.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\filesystem\__tests__\path-validation.test.ts:1
    ({"Object.<anonymous>":function(module,exports,require,__dirname,__filename,jest){import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';
                                                                                      ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/filesystem/__tests__/roots-utils.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\filesystem\__tests__\roots-utils.test.ts:1
    ({"Object.<anonymous>":function(module,exports,require,__dirname,__filename,jest){import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';
                                                                                      ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/filesystem/__tests__/path-utils.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\filesystem\__tests__\path-utils.test.ts:1
    ({"Object.<anonymous>":function(module,exports,require,__dirname,__filename,jest){import { describe, it, expect } from '@jest/globals';
                                                                                      ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/filesystem/__tests__/lib.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\filesystem\__tests__\lib.test.ts:1
    ({"Object.<anonymous>":function(module,exports,require,__dirname,__filename,jest){import { describe, it, expect, beforeEach, afterEach, jest } from '@jest/globals';
                                                                                      ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)

FAIL servers/src/filesystem/__tests__/directory-tree.test.ts
  ΓùÅ Test suite failed to run

    Jest encountered an unexpected token

    Jest failed to parse a file. This happens e.g. when your code or its dependencies use non-standard JavaScript syntax, or when Jest is not configured to support such syntax.

    Out of the box Jest supports Babel, which will be used to transform your files into valid JS based on your Babel configuration.

    By default "node_modules" folder is ignored by transformers.

    Here's what you can do:
     ΓÇó If you are trying to use ECMAScript Modules, see https://jestjs.io/docs/ecmascript-modules for how to enable it.
     ΓÇó If you are trying to use TypeScript, see https://jestjs.io/docs/getting-started#using-typescript
     ΓÇó To have some of your "node_modules" files transformed, you can specify a custom "transformIgnorePatterns" in your config.
     ΓÇó If you need a custom transformation specify a "transform" option in your config.
     ΓÇó If you simply want to mock your non-JS modules (e.g. binary assets) you can stub them out with the "moduleNameMapper" config option.

    You'll find more details and examples of these config options in the docs:
    https://jestjs.io/docs/configuration
    For information about custom transformations, see:
    https://jestjs.io/docs/code-transformation

    Details:

    C:\Users\Austin\Documents\theporadas_site\servers\src\filesystem\__tests__\directory-tree.test.ts:1
    ({"Object.<anonymous>":function(module,exports,require,__dirname,__filename,jest){import { describe, it, expect, beforeEach, afterEach } from '@jest/globals';
                                                                                      ^^^^^^

    SyntaxError: Cannot use import statement outside a module

      at Runtime.createScriptFromCode (node_modules/jest-runtime/build/index.js:1505:14)


Test Suites: 16 failed, 5 passed, 21 total
Tests:       127 passed, 127 total
Snapshots:   0 total
Time:        3.091 s
Ran all test suites.
