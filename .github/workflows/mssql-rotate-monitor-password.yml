name: MSSQL Monitor Password Rotation

on:
  schedule:
    - cron: '30 3 1 */3 *' # Quarterly on the 1st at 03:30 UTC
  workflow_dispatch:
    inputs:
      dry_run:
        description: 'Perform rotation WhatIf only'
        required: false
        default: 'false'
      custom_length:
        description: 'Optional custom password length'
        required: false
        default: '40'

jobs:
  rotate-monitor-password:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      actions: read
    env:
      MSSQL_SERVER: ${{ secrets.MSSQL_SERVER }}
      MSSQL_SA_PASSWORD: ${{ secrets.MSSQL_SA_PASSWORD }}
      MSSQL_MONITOR_USER: ${{ secrets.MSSQL_MONITOR_USER }}
    steps:
      - uses: actions/checkout@v4
      - name: Install sqlcmd dependencies
        run: |
          sudo apt-get update
          sudo ACCEPT_EULA=Y apt-get install -y msodbcsql18 mssql-tools18 unixodbc-dev
          echo "/opt/mssql-tools18/bin" >> $GITHUB_PATH
      - name: Rotate monitor password
        id: rotate
        shell: pwsh
        run: |
          if (-not $env:MSSQL_SERVER -or -not $env:MSSQL_SA_PASSWORD -or -not $env:MSSQL_MONITOR_USER) {
            Write-Host 'Missing required secrets (MSSQL_SERVER / MSSQL_SA_PASSWORD / MSSQL_MONITOR_USER).'; exit 1 }
          $len = [int]('${{ github.event.inputs.custom_length || '40' }}')
          $chars = 'ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz23456789!@#$%^&*()-_=+[]{}'
          $new = -join ((1..$len) | ForEach-Object { $chars[(Get-Random -Max $chars.Length)] })
          $tmpScript = Join-Path $PWD 'rotate_monitor_password.ps1'
          $dry = '${{ github.event.inputs.dry_run || 'false' }}'
          if ($dry -eq 'true') { $whatIf = '-WhatIf' } else { $whatIf = '' }
          pwsh scripts/rotate_monitor_password.ps1 -Server $env:MSSQL_SERVER -SaUser sa -SaPasswordPlain $env:MSSQL_SA_PASSWORD -MonitorLogin $env:MSSQL_MONITOR_USER @whatIf | Tee-Object -Variable output
          if ($dry -eq 'true') { Write-Host 'Dry run complete.'; exit 0 }
          # Extract new password from output line
          $pwdLine = $output | Select-String -Pattern 'New Monitor Password:' | Select-Object -Last 1
          if (-not $pwdLine) { Write-Host 'Could not extract new password.'; exit 1 }
          $newPwd = ($pwdLine -split 'New Monitor Password:\s*')[1].Trim()
          echo "new_password=$newPwd" >> $GITHUB_OUTPUT
      - name: Display rotation result
        if: steps.rotate.outputs.new_password
        run: echo 'Rotated monitor password (update secret manually). See job output for masked value.'

      # NOTE: GitHub Actions cannot update repository secrets directly without an auth workflow using REST API + PAT.
      # Manual step required: copy the new_password output value into MSSQL_MONITOR_PASSWORD secret.
