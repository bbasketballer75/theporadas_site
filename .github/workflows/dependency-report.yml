name: Weekly Dependency Report

on:
  schedule:
    # Run weekly on Fridays at 10 AM UTC
    - cron: '0 10 * * 5'
  workflow_dispatch: # Allow manual trigger

jobs:
  generate-report:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate dependency report
        id: report
        run: |
          node scripts/generate-dependency-report.mjs
          echo "report-path=dependency-report.md" >> $GITHUB_OUTPUT

      - name: Read report
        id: read-report
        run: |
          REPORT_CONTENT=$(cat dependency-report.md)
          echo "content<<EOF" >> $GITHUB_OUTPUT
          echo "$REPORT_CONTENT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Check for issues
        id: check-issues
        run: |
          # Count outdated packages
          OUTDATED=$(npm outdated --json 2>/dev/null | jq 'length' 2>/dev/null || echo "0")

          # Check for vulnerabilities
          VULN=$(npm audit --json 2>/dev/null | jq '.metadata.vulnerabilities.total // 0' 2>/dev/null || echo "0")

          echo "outdated=$OUTDATED" >> $GITHUB_OUTPUT
          echo "vulnerabilities=$VULN" >> $GITHUB_OUTPUT

          # Determine if we need to create an issue
          if [ "$OUTDATED" -gt "10" ] || [ "$VULN" -gt "0" ]; then
            echo "create-issue=true" >> $GITHUB_OUTPUT
          else
            echo "create-issue=false" >> $GITHUB_OUTPUT
          fi

      - name: Create GitHub Issue
        if: steps.check-issues.outputs.create-issue == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const report = `${{ steps.read-report.outputs.content }}`;

            const issueTitle = `ðŸ“¦ Weekly Dependency Report - ${new Date().toISOString().split('T')[0]}`;
            const issueBody = report + '\n\n---\n\n*This issue was automatically created by the dependency monitoring workflow.*';

            // Check if an issue already exists for this week
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['dependencies', 'automated'],
              state: 'open',
              sort: 'created',
              direction: 'desc',
              per_page: 5
            });

            const thisWeek = new Date().toISOString().split('T')[0].slice(0, 7); // YYYY-MM
            const existingIssue = issues.find(issue =>
              issue.title.includes(thisWeek) && issue.title.includes('Dependency Report')
            );

            if (!existingIssue) {
              await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: issueTitle,
                body: issueBody,
                labels: ['dependencies', 'automated', 'weekly-report']
              });
            }

      - name: Upload report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: dependency-report-${{ github.run_number }}
          path: dependency-report.md

      - name: Comment on existing issues
        if: steps.check-issues.outputs.create-issue == 'false' && steps.check-issues.outputs.outdated > '0'
        uses: actions/github-script@v7
        with:
          script: |
            const report = `${{ steps.read-report.outputs.content }}`;

            // Find the most recent dependency issue
            const { data: issues } = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['dependencies'],
              state: 'open',
              sort: 'updated',
              direction: 'desc',
              per_page: 1
            });

            if (issues.length > 0) {
              const issue = issues[0];
              const comment = `## Weekly Update\n\n${report}\n\n---\n\n*Automated dependency check - ${new Date().toISOString().split('T')[0]}*`;

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: issue.number,
                body: comment
              });
            }