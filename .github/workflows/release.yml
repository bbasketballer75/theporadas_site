name: Create Release

on:
  push:
    branches:
      - main
  workflow_dispatch:

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install dependencies
        run: npm ci --workspaces

      - name: Build
        run: npm run build --workspaces

      - name: Archive build artifacts
        run: |
          tar -czf next-build.tar.gz .next || true

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: release-${{ github.run_id }}
          release_name: 'Production release ${{ github.run_id }}'
          body: 'Production build artifacts for release ${{ github.run_id }}'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifact to release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./next-build.tar.gz
          asset_name: next-build.tar.gz
          asset_content_type: application/gzip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Post release notification (Slack or issue)
        uses: actions/github-script@v6
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const release = (await github.repos.getReleaseByTag({ owner: context.repo.owner, repo: context.repo.repo, tag: `release-${process.env.GITHUB_RUN_ID}` })).data;
            const url = release.html_url;
            const message = `A new release is published: ${url}`;

            const slackWebhook = process.env.SLACK_WEBHOOK_URL || null;
            if (slackWebhook) {
              const spawn = require('child_process').spawnSync;
              const payload = { text: `:bookmark: ${message}` };
              spawn('curl', ['-s', '-X', 'POST', '-H', 'Content-Type: application/json', '-d', JSON.stringify(payload), slackWebhook]);
              core.info('Posted release notification to Slack webhook.');
              return;
            }

            // fallback: post to a Deployments issue
            const list = await github.issues.listForRepo({ owner: context.repo.owner, repo: context.repo.repo, labels: 'deployments', state: 'open' });
            let issueNumber = null;
            if (list.data && list.data.length > 0) { issueNumber = list.data[0].number; }
            else {
              const created = await github.issues.create({ owner: context.repo.owner, repo: context.repo.repo, title: 'Deployments', body: 'This issue collects deployment and release notifications.' });
              issueNumber = created.data.number;
            }
            await github.issues.createComment({ owner: context.repo.owner, repo: context.repo.repo, issue_number: issueNumber, body: `:bookmark: ${message}` });
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
