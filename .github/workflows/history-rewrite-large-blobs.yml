
name: History Rewrite (Large Blobs Removal)

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      confirm:
        description: "Type 'YES' to confirm destructive history rewrite (only needed for non-dry run)"
        required: false
        default: ''
      dry_run:
        description: "Set to 'true' to only collect diagnostics (no rewrite/push)"
        required: false
        default: 'true'

jobs:
  rewrite:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout mirror (bare) for filter
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show pre-rewrite size
        run: |
          git count-objects -vH || true
          git rev-parse HEAD > pre_rewrite_head.txt

      - name: Collect baseline largest blobs
        run: |
          for idx in .git/objects/pack/pack-*.idx; do
            git verify-pack -v "$idx" | awk '/ blob /{print $1, $3}' ;
          done | sort -k2 -n | tail -50 > baseline_largest_blobs.txt
          echo "Baseline largest blobs captured:"; tail -10 baseline_largest_blobs.txt

      - name: Record target blob presence (pre)
        run: |
          printf "%s\n" \
            30200ab4e2da2bbc2bcb44f51cc4447f7056fae8 \
            bf52f84b4f2af2b9234134ee132c3aadbcd80e5f \
            6624a873c4920cfa1292299928f45334fd37b0c9 \
            3468993b47ee0ff0c7bc511ab07185ef28288f9e \
            2ebc57c388733ccc76a78884f146563f06cfa9c1 \
            a57d0977d6389efb225783cdd6cf042e31ea3160 \
            25deff980b97d1bd3ff06b19e4e2eed51dd4c64c \
            a3c16f6c270d9780ac8cd88085f0a351e8cbf674 > target_blobs.txt
          while read sha; do
            if git cat-file -t "$sha" >/dev/null 2>&1; then echo "$sha PRESENT"; else echo "$sha MISSING"; fi;
          done < target_blobs.txt > target_presence_pre.txt
          cat target_presence_pre.txt

      - name: Install git-filter-repo
        run: |
          pipx install git-filter-repo || pip install --user git-filter-repo
          python -c "import git_filter_repo, sys; print('git-filter-repo version OK')"

      - name: Run blob rewrite script
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != 'true' && github.event.inputs.confirm == 'YES' }}
        run: |
          echo "Performing destructive rewrite..."
          python scripts/large_blob_rewrite.py

      - name: Aggressive GC
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != 'true' && github.event.inputs.confirm == 'YES' }}
        run: |
          git reflog expire --all --expire=now
          git gc --prune=now --aggressive
          git repack -adf

      - name: Post-rewrite size
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != 'true' && github.event.inputs.confirm == 'YES' }}
        run: git count-objects -vH

      - name: Capture largest remaining blobs (diagnostic)
        run: |
          for idx in .git/objects/pack/pack-*.idx; do
            git verify-pack -v "$idx" | awk '/ blob /{print $1, $3}' | sort -k2 -n | tail -20
          done | tee rewrite_largest_blobs.txt

      - name: Record target blob presence (post)
        run: |
          while read sha; do
            if git cat-file -t "$sha" >/dev/null 2>&1; then echo "$sha PRESENT"; else echo "$sha MISSING"; fi;
          done < target_blobs.txt > target_presence_post.txt
          cat target_presence_post.txt

      - name: Diff largest blobs
        run: |
          awk '{print $1":"$2}' baseline_largest_blobs.txt | sort > baseline.tmp
          awk '{print $1":"$2}' rewrite_largest_blobs.txt | sort > post.tmp
          comm -23 baseline.tmp post.tmp > removed_blobs.txt || true
          { echo "Removed (or shrunk) blobs (may include unreachable GC'd later):"; cat removed_blobs.txt; } > diff_report.txt
          echo "Top 20 after rewrite:" >> diff_report.txt
          cat rewrite_largest_blobs.txt >> diff_report.txt
          echo "Target blob presence pre:" >> diff_report.txt
          cat target_presence_pre.txt >> diff_report.txt
          echo "Target blob presence post:" >> diff_report.txt
          cat target_presence_post.txt >> diff_report.txt
          echo "Diff report generated."; tail -25 diff_report.txt

      - name: Upload diagnostics artifact
        uses: actions/upload-artifact@v4
        with:
          name: rewrite-diagnostics
          path: |
            baseline_largest_blobs.txt
            rewrite_largest_blobs.txt
            diff_report.txt
            target_presence_pre.txt
            target_presence_post.txt
            pre_rewrite_head.txt

      - name: Force push rewritten history
        if: ${{ github.event_name == 'workflow_dispatch' && github.event.inputs.dry_run != 'true' && github.event.inputs.confirm == 'YES' && github.ref == 'refs/heads/main' }}
        run: |
          git push --force --all
          git push --force --tags

      - name: Summary
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
            echo "Workflow dispatch invoked." >> $GITHUB_STEP_SUMMARY
            echo "dry_run=${{ github.event.inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
            if [ "${{ github.event.inputs.dry_run }}" != "true" ] && [ "${{ github.event.inputs.confirm }}" = "YES" ]; then
              echo "Destructive rewrite executed." >> $GITHUB_STEP_SUMMARY
            else
              echo "Destructive rewrite NOT executed (dry run or missing confirmation)." >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "Push-triggered diagnostics run (no destructive rewrite)." >> $GITHUB_STEP_SUMMARY
          fi
          echo "Target blob presence post:" >> $GITHUB_STEP_SUMMARY
          cat target_presence_post.txt >> $GITHUB_STEP_SUMMARY

on:\n  push:\n    branches: [ main ]
  workflow_dispatch:
    inputs:
      confirm:
        description: 'Type YES to allow force-push'
        required: true
        default: 'NO'
      dry_run:
        description: 'If true, only report (no rewrite)'
        required: true
        default: 'true'
      size_threshold_mb:
        description: 'Minimum blob size (MB) to purge'
        required: true
        default: '100'

permissions:
  contents: write

concurrency:
  group: history-rewrite
  cancel-in-progress: false

jobs:
  rewrite:
    runs-on: ubuntu-latest
    timeout-minutes: 120
    steps:
      - name: Checkout full history
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Show initial repo size stats
        run: |
          git count-objects -v > before_size.txt
          cat before_size.txt

      - name: Enumerate large blobs
        id: find
        env:
          THRESHOLD_BYTES: ${{ inputs.size_threshold_mb }}000000
        run: |
          echo "Scanning for blobs >= ${THRESHOLD_BYTES} bytes";
          git rev-list --objects --all > all_objects.txt
          > large_blobs.txt
          > large_blob_shas.txt
          while read sha path; do
            [ -z "$sha" ] && continue
            size=$(git cat-file -s "$sha" 2>/dev/null || echo 0)
            if [ "$size" -ge "$THRESHOLD_BYTES" ]; then
              echo "$size $sha $path" | tee -a large_blobs.txt
              echo "$sha" >> large_blob_shas.txt
            fi
          done < <(git rev-list --objects --all)
          sort -nr large_blobs.txt | head -50 | tee top50_large_blobs.txt || true
          count=$(wc -l < large_blob_shas.txt | tr -d ' ')
          echo "found_count=$count" >> $GITHUB_OUTPUT
          if [ "$count" -eq 0 ]; then
            echo "No blobs exceed threshold.";
          fi

      - name: Abort early if none & dry-run
        if: steps.find.outputs.found_count == '0'
        run: echo "No large blobs detected; nothing to do.";

      - name: Install git-filter-repo
        if: steps.find.outputs.found_count != '0' && inputs.dry_run == 'false'
        run: |
          python3 -m pip install --upgrade pip
          pip install git-filter-repo

      - name: Rewrite history (purge large blobs)
        if: steps.find.outputs.found_count != '0' && inputs.dry_run == 'false'
        env:
          CONFIRM: ${{ inputs.confirm }}
        run: |
          if [ "$CONFIRM" != "YES" ]; then
            echo "CONFIRM not YES. Refusing to rewrite."; exit 1; fi
          echo "Starting filter-repo purge for $(wc -l < large_blob_shas.txt) blobs";
          python3 - <<'PY'
import sys
try:
    import git_filter_repo as gfr
except ImportError:
    print('git-filter-repo not installed', file=sys.stderr)
    sys.exit(2)
with open('large_blob_shas.txt','r') as f:
    targets={l.strip() for l in f if l.strip()}
print(f'Purging {len(targets)} blobs')

def blob_cb(blob, metadata):
    if blob.oid in targets:
        blob.data=b''

gfr.FilterRepo(blob_callback=blob_cb).run()
PY
          echo "Rewrite complete";
          git count-objects -v > after_size.txt

      - name: Summarize differences
        if: steps.find.outputs.found_count != '0'
        run: |
          if [ -f after_size.txt ]; then
            echo "Repo size BEFORE:"; cat before_size.txt
            echo "Repo size AFTER:"; cat after_size.txt
          else
            echo "(Dry run) Repo size BEFORE:"; cat before_size.txt
          fi

      - name: Prepare artifact bundle
        run: |
          mkdir artifacts
          cp -f before_size.txt artifacts/ 2>/dev/null || true
          [ -f after_size.txt ] && cp -f after_size.txt artifacts/ || true
          cp -f large_blobs.txt artifacts/ 2>/dev/null || true
          cp -f large_blob_shas.txt artifacts/ 2>/dev/null || true
          cp -f top50_large_blobs.txt artifacts/ 2>/dev/null || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: history-rewrite-diagnostics
          path: artifacts
          retention-days: 14

      - name: Force push rewritten history
        if: inputs.dry_run == 'false' && inputs.confirm == 'YES' && steps.find.outputs.found_count != '0'
        run: |
          current_branch=$(git symbolic-ref --short HEAD)
          echo "Current branch: $current_branch"
          if [ "$current_branch" != "main" ]; then
            echo "Not on main; refusing to force push"; exit 1; fi
          git remote -v
          git push origin --force --tags

      - name: Post-run note
        run: |
          echo "Done. Review artifacts for details.";
