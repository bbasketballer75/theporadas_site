/* eslint-disable @typescript-eslint/no-explicit-any */`nimport { hierarchy, linkVertical, select, tree, zoom } from 'd3';`nimport React, { useCallback, useEffect, useRef, useState } from 'react';`nimport { FamilyMember, familyMembersService } from '../services/api';`nimport { detectBrowser } from '../utils/browserDetection';`ninterface FamilyTreeProps {`n  width?: number;`n  height?: number;`n  onMemberClick?: (member: FamilyMember) => void;`n}`nexport function FamilyTree({ width = 800, height = 600, onMemberClick }: FamilyTreeProps) {`n  const svgRef = useRef<SVGSVGElement>(null);`n  const [familyMembers, setFamilyMembers] = useState<FamilyMember[]>([]);`n  const [loading, setLoading] = useState(true);`r`n  const [searchTerm, setSearchTerm] = useState('');`r`n  const [filteredMembers, setFilteredMembers] = useState<FamilyMember[]>([]);`n  const [error, setError] = useState<string | null>(null);`n  // Browser detection for D3.js compatibility fixes`r`n`r`n  // Filter members based on search term`r`n  const filterMembers = useCallback((members: FamilyMember[], term: string) => {`r`n    if (!term.trim()) return members;`r`n`r`n    const lowerTerm = term.toLowerCase();`r`n    return members.filter(member =>`r`n      member.name.toLowerCase().includes(lowerTerm) ||`r`n      member.relationship.toLowerCase().includes(lowerTerm) ||`r`n      (member.description && member.description.toLowerCase().includes(lowerTerm)) ||`r`n      (member.birthDate && member.birthDate.toLowerCase().includes(lowerTerm))`r`n    );`r`n  }, []);`r`n`r`n  // Update filtered members when search term or family members change`r`n  useEffect(() => {`r`n    setFilteredMembers(filterMembers(familyMembers, searchTerm));`r`n  }, [familyMembers, searchTerm, filterMembers]);`n  const browserInfo = React.useMemo(() => detectBrowser(), []);`n  // Load family members data`n  useEffect(() => {`n    const loadFamilyData = async () => {`n      try {`n        setLoading(true);`n        // Add timeout to API call`n        const timeoutPromise = new Promise((_, reject) => {`n          setTimeout(() => reject(new Error('API request timed out')), 5000);`n        });`n        const dataPromise = familyMembersService.getAll();`n        const members = await Promise.race([dataPromise, timeoutPromise]) as FamilyMember[];`n        setFamilyMembers(members);`n        setError(null);`n      } catch (err) {`n        setError(err instanceof Error ? err.message : 'Failed to load family data');`n        console.error('Error loading family data:', err);`n      } finally {`n        setLoading(false);`n      }`n    };`n    loadFamilyData();`n  }, []);`n  // Build family tree hierarchy`n  const buildFamilyTree = useCallback((members: FamilyMember[]) => {`n    if (members.length === 0) return null;`n    // Find root members (those without parents)`n    const rootMembers = members.filter(`n      (member) => !member.parentIds || member.parentIds.length === 0,`n    );`n    if (rootMembers.length === 0) {`n      // If no clear root, use the first member`n      const firstMember = members[0];`n      return hierarchy(firstMember, (d) => {`n        return members.filter((m) => d.childrenIds && d.childrenIds.includes(m.id || ''));`n      });`n    }`n    // Use the first root member as the tree root`n    const rootMember = rootMembers[0];`n    return hierarchy(rootMember, (d) => {`n      return members.filter((m) => d.childrenIds && d.childrenIds.includes(m.id || ''));`n    });`n  }, []);`n  // Create the family tree visualization`n  useEffect(() => {`n    if (!svgRef.current || filteredMembers.length === 0 || loading) return;`n    const svg = select(svgRef.current);`n    svg.selectAll('*').remove(); // Clear previous content`n    const treeData = buildFamilyTree(filteredMembers);`n    if (!treeData) return;`n    // Create tree layout`n    const nodeWidth = 160;`n    const nodeHeight = 120;`n    const treeLayout = tree<FamilyMember>().size([width, height]).nodeSize([nodeWidth, nodeHeight]);`n    const root = treeLayout(treeData);`n    // Create main group`n    const g = svg.append('g').attr('transform', `translate(${width / 2}, ${height / 2})`);`n    // Create zoom behavior`n    const zoomBehavior = zoom<SVGSVGElement, unknown>()`n      .scaleExtent([0.1, 3])`n      .on('zoom', (event) => {`n        // Apply zoom transform to the main group`n        g.attr(`n          'transform',`n          `translate(${width / 2}, ${height / 2}) scale(${event.transform.k}) translate(${event.transform.x}, ${event.transform.y})`,`n        );`n      });`n    svg.call(zoomBehavior);`n    // Create links`n    g.selectAll('.link')`n      .data(root.links())`n      .enter()`n      .append('path')`n      .attr('class', 'link')`n      .attr('d', (d: any) => {`n        const linkGenerator = linkVertical()`n          .x((d: any) => d.x)`n          .y((d: any) => d.y);`n        return linkGenerator(d);`n      })`n      .attr('fill', 'none')`n      .attr('stroke', '#ccc')`n      .attr('stroke-width', 2);`n    // Create nodes`n    const node = g`n      .selectAll('.node')`n      .data(root.descendants())`n      .enter()`n      .append('g')`n      .attr('class', 'node')`n      .attr('transform', (d) => `translate(${d.x}, ${d.y})`);`n    // Add circles for nodes`n    node`n      .append('circle')`n      .attr('r', 40)`n      .attr('fill', (d) => (d.data.spouseId ? '#ff6b6b' : '#4ecdc4'))`n      .attr('stroke', '#333')`n      .attr('stroke-width', 2)`n      .style('cursor', 'pointer')`n      .on('click', (event, d) => {`n        if (onMemberClick) {`n          onMemberClick(d.data);`n        }`n      });`n    // Add member photos or initials`n    node.each(function (d) {`n      const nodeGroup = select(this);`n      const member = d.data;`n      if (member.photoUrl) {`n        // Add photo`n        nodeGroup`n          .append('image')`n          .attr('xlink:href', member.photoUrl)`n          .attr('x', -30)`n          .attr('y', -30)`n          .attr('width', 60)`n          .attr('height', 60)`n          .attr('clip-path', 'circle()')`n          .style('cursor', 'pointer')`n          .on('click', () => {`n            if (onMemberClick) {`n              onMemberClick(member);`n            }`n          });`n      } else {`n        // Add initials`n        const initials = member.name`n          .split(' ')`n          .map((n) => n[0])`n          .join('')`n          .toUpperCase();`n        nodeGroup`n          .append('text')`n          .attr('dy', '0.35em')`n          .attr('text-anchor', 'middle')`n          .attr('font-size', '16px')`n          .attr('font-weight', 'bold')`n          .attr('fill', 'white')`n          .style('pointer-events', 'none')`n          .text(initials);`n      }`n    });`n    // Add member names`n    node`n      .append('text')`n      .attr('dy', '4em')`n      .attr('text-anchor', 'middle')`n      .attr('font-size', '12px')`n      .attr('font-weight', '500')`n      .attr('fill', '#333')`n      .style('pointer-events', 'none')`n      .text((d) => d.data.name);`n    // Add tooltips`n    const tooltip = select('body')`n      .append('div')`n      .attr('class', 'family-tree-tooltip')`n      .style('position', 'absolute')`n      .style('visibility', 'hidden')`n      .style('background', 'rgba(0, 0, 0, 0.8)')`n      .style('color', 'white')`n      .style('padding', '8px')`n      .style('border-radius', '4px')`n      .style('font-size', '12px')`n      .style('pointer-events', 'none')`n      .style('z-index', '1000');`n    node`n      .on('mouseover', function (event, d) {`n        const member = d.data;`n        tooltip.style('visibility', 'visible').html(``n            <div><strong>${member.name}</strong></div>`n            <div>Relationship: ${member.relationship}</div>`n            ${member.birthDate ? `<div>Born: ${member.birthDate}</div>` : ''}`n            ${member.description ? `<div>${member.description}</div>` : ''}`n          `);`n      })`n      .on('mousemove', function (event) {`n        tooltip.style('top', event.pageY - 10 + 'px').style('left', event.pageX + 10 + 'px');`n      })`n      .on('mouseout', function () {`n        tooltip.style('visibility', 'hidden');`n      });`n    // Cleanup tooltip on unmount`n    return () => {`n      tooltip.remove();`n    };`n  }, [filteredMembers, loading, width, height, buildFamilyTree, onMemberClick]);`n  if (loading) {`n    return (`n      <div`n        className="family-tree-loading"`n        style={{ width, height, display: 'flex', alignItems: 'center', justifyContent: 'center' }}`n      >`n        <div>Loading family tree...</div>`n      </div>`n    );`n  }`n  if (error) {`n    return (`n      <div`n        className="family-tree-error"`n        style={{`n          width,`n          height,`n          display: 'flex',`n          alignItems: 'center',`n          justifyContent: 'center',`n          color: 'red',`n        }}`n      >`n        <div>{error}</div>`n      </div>`n    );`n  }`n  if (familyMembers.length === 0) {`n    return (`n      <div`n        className="family-tree-empty"`n        style={{ width, height, display: 'flex', alignItems: 'center', justifyContent: 'center' }}`n      >`n        <div>No family members found</div>`n      </div>`n    );`n  }`n  return (`n    <div`n      className="family-tree-container"`n      style={{ width, height }}`n      data-loading={loading ? "true" : "false"}`n      data-rendered={familyMembers.length > 0 && !loading ? "true" : "false"}`n      data-testid="family-tree"`n    >`n      <svg`n        ref={svgRef}`n        width={width}`n        height={height}`n        style={{ border: '1px solid #ccc', borderRadius: '4px' }}`n        aria-label="Interactive family tree visualization"`n      />`n      <div`n        className="family-tree-controls"`n        style={{ marginTop: '10px', fontSize: '14px', color: '#666' }}`n      >`n        <div>Zoom: Mouse wheel | Pan: Click and drag | Click nodes for details</div>`n        <div style={{ marginTop: '8px' }}>`n          <button`n            type="button"`n            onClick={() => {`n              const svg = svgRef.current;`n              if (svg) {`n                // Zoom in`n                const zoomBehavior = select(svg).select<SVGGElement>('g');`n                if (zoomBehavior) {`n                  // This is a simplified zoom in - in a real implementation you'd use D3 zoom`n                  const currentTransform = zoomBehavior.attr('transform') || '';`n                  zoomBehavior.attr('transform', currentTransform + ' scale(1.2)');`n                }`n              }`n            }}`n            data-testid="zoom-in"`n            style={{ marginRight: '8px' }}`n          >`n            Zoom In`n          </button>`n          <button`n            type="button"`n            onClick={() => {`n              const svg = svgRef.current;`n              if (svg) {`n                // Zoom out`n                const zoomBehavior = select(svg).select<SVGGElement>('g');`n                if (zoomBehavior) {`n                  const currentTransform = zoomBehavior.attr('transform') || '';`n                  zoomBehavior.attr('transform', currentTransform + ' scale(0.8)');`n                }`n              }`n            }}`n            data-testid="zoom-out"`n            style={{ marginRight: '8px' }}`n          >`n            Zoom Out`n          </button>`n          <button`n            type="button"`n            onClick={() => {`n              const svg = svgRef.current;`n              if (svg) {`n                // Reset view`n                const zoomBehavior = select(svg).select<SVGGElement>('g');`n                if (zoomBehavior) {`n                  zoomBehavior.attr('transform', `translate(${width / 2}, ${height / 2})`);`n                }`n              }`n            }}`n            data-testid="reset-view"`n          >`n            Reset View`n          </button>`n        </div>`n      </div>`n    </div>`n  );`n}
